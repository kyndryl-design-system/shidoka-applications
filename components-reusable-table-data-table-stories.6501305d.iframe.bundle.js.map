{"version":3,"file":"components-reusable-table-data-table-stories.6501305d.iframe.bundle.js","mappings":";;;AAqPA;AACA;;;AAGA;;AAEA;;AAGA;AACA;;AAEA;;;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;AACA;;AAGA;AACA;AAIA;;AASA;;;AAIA;AACA;AAMA;;AAEA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AC/SA;;;;;;;;;;;AAWA;;;AAGA;;;;;;;;;AASA;;AAEA;;;;;;AAMA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;AAkBA;;ACwTA;AACA;;AAIA;;;;;;;;;;;;AAcA;AACA;AACA;AAxGA;AA0GA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AA9LA;AA+DA;;;AAoIA;;;;;;;;;;AAcA;;AAEA;;;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/table/data-table.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/table/story-helpers/batch-actions.ts","webpack://@kyndryl-design-system/shidoka-applications/"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\n\n// Import required components and icons\nimport '@kyndryl-design-system/shidoka-foundation/components/button';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\n\nimport '../checkbox/checkbox';\nimport '../pagination'\nimport './index';\nimport styles from './data-table.scss';\n\ntype ColumnDefinition = {\n  sortable?: boolean;\n  sortFn?: Function;\n  field: string;\n  align?: string;\n  headerName: string;\n  valueGetter?: Function;\n  width?: string;\n  maxWidth?: string;\n  ellipsis?: boolean;\n  cellRenderer?: (data: { row: any; column: ColumnDefinition }) => any;\n};\n\n/**\n * DEPRECATED. `kyn-data-table` Web Component.\n * This component provides a table with sorting, pagination, and selection capabilities.\n * It is designed to be used with the `kyn-table-toolbar` and `kyn-table-container` components.\n * @fires on-selected-rows-changed - Dispatched when the selected rows change.\n * @fires on-sort-changed - Dispatched when the sort order changes.\n * @fires on-page-changed - Dispatched when the page number or page size changes.\n */\n\n@customElement('kyn-data-table')\nexport class DataTable extends LitElement {\n  static override styles = [styles];\n\n  /**\n   * rows: Array of objects representing each row in the data table.\n   */\n  @property({ type: Array })\n  rows: any[] = [];\n\n  /**\n   * columns: Array of objects defining column properties such as\n   * field name, sorting function, etc.\n   */\n  @property({ type: Array })\n  columns: ColumnDefinition[] = [];\n\n  /**\n   * checkboxSelection: Boolean indicating whether rows should be\n   * selectable using checkboxes.\n   */\n  @property({ type: Boolean })\n  checkboxSelection = false;\n\n  /**\n   * striped: Boolean indicating whether rows should have alternate\n   * coloring.\n   */\n  @property({ type: Boolean })\n  striped = false;\n\n  /**\n   * selectedRows: Set of row ids that are currently selected.\n   */\n  @property({ type: Set })\n  selectedRows = new Set<number>();\n\n  /**\n   * selectAll: Boolean indicating whether all rows are currently\n   * selected.\n   * @ignore\n   */\n  @state()\n  selectAll = false;\n\n  /**\n   * stickyHeader: Boolean indicating whether the table header\n   * should be sticky.\n   */\n  @property({ type: Boolean })\n  stickyHeader = false;\n\n  /**\n   * dense: Boolean indicating whether the table should be displayed\n   * in dense mode.\n   */\n  @property({ type: Boolean })\n  dense = false;\n\n  /**\n   * paginationModel: Object holding pagination information such as\n   * current page, page size, etc.\n   */\n  @property({ type: Object })\n  paginationModel = {\n    count: 0,\n    pageSize: 5,\n    pageNumber: 0,\n    pageSizeOptions: [5, 10],\n  };\n\n  /** Option to hide the items range display. */\n  @property({ type: Boolean })\n  hideItemsRange = false;\n\n  /** Option to hide the page size dropdown. */\n  @property({ type: Boolean })\n  hidePageSizeDropdown = false;\n\n  /** Option to hide the navigation buttons. */\n  @property({ type: Boolean })\n  hideNavigationButtons = false;\n\n  /** Determines if the table layout is fixed (true) or auto (false). */\n  @property({ type: Boolean })\n  fixedLayout = false;\n\n  /**\n   * headerCheckboxIndeterminate: Boolean indicating whether the header\n   * checkbox is in an indeterminate state.\n   * @ignore\n   */\n  @state()\n  headerCheckboxIndeterminate = false;\n\n  /**\n   * headerCheckboxChecked: Boolean indicating whether the header checkbox is\n   * checked.\n   * @ignore\n   */\n  @state()\n  headerCheckboxChecked = false;\n\n  /**\n   * Updates the state of the header checkbox based on the number of\n   * selected rows.\n   */\n  updateHeaderCheckbox() {\n    if (this.selectedRows.size === 0) {\n      this.headerCheckboxIndeterminate = false;\n      this.headerCheckboxChecked = false;\n    } else if (this.selectedRows.size === this.rows.length) {\n      this.headerCheckboxIndeterminate = false;\n      this.headerCheckboxChecked = true;\n      this.selectAll = true;\n    } else {\n      this.headerCheckboxIndeterminate = true;\n      this.headerCheckboxChecked = false;\n      this.selectAll = false;\n    }\n  }\n\n  /**\n   * Handles the change of selection state for a specific row.\n   */\n  handleRowSelectionChange(rowId: number, isChecked: boolean) {\n    const newSet = new Set(this.selectedRows);\n    if (isChecked) {\n      newSet.add(rowId);\n    } else {\n      newSet.delete(rowId);\n    }\n    this.selectedRows = newSet;\n    this.updateHeaderCheckbox();\n\n    // Emit the custom event with the updated selectedRows\n    this.dispatchEvent(\n      new CustomEvent('on-selected-rows-changed', {\n        detail: { selectedRows: Array.from(this.selectedRows) },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  /**\n   * Toggles the selection state of all rows in the table.\n   */\n  toggleSelectionAll() {\n    this.selectAll = !this.selectAll;\n    if (this.selectAll) {\n      // If selecting all, add all row ids to the selectedRows set\n      this.rows.forEach((row) => this.selectedRows.add(row.id));\n    } else {\n      // If deselecting all, clear the selectedRows set\n      this.selectedRows.clear();\n    }\n\n    this.updateHeaderCheckbox();\n    this.requestUpdate();\n\n    this.dispatchEvent(\n      new CustomEvent('on-selected-rows-changed', {\n        detail: { selectedRows: Array.from(this.selectedRows) },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  /**\n   * Handles the change of page size in pagination.\n   */\n  onPageSizeChange(event: CustomEvent) {\n    this.paginationModel.pageSize = event.detail.value;\n    this.dispatchEvent(\n      new CustomEvent('on-page-changed', {\n        detail: { pageSize: event.detail.value, pageNumber: 1 },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  /**\n   * Handles the change of page number in pagination.\n   */\n  onPageNumberChange(event: CustomEvent) {\n    this.paginationModel.pageNumber = event.detail.value;\n    const pageSize = this.paginationModel.pageSize;\n    this.dispatchEvent(\n      new CustomEvent('on-page-changed', {\n        detail: { pageNumber: event.detail.value, pageSize },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  override render() {\n    const { count, pageSize, pageNumber, pageSizeOptions } =\n      this.paginationModel;\n\n    this.selectedRows = new Set(this.selectedRows || []);\n    this.updateHeaderCheckbox();\n\n    return html`\n      <kyn-table-container>\n        <kyn-table\n          ?fixedLayout=${this.fixedLayout}\n          ?stickyHeader=${this.stickyHeader}\n          ?\n        >\n          <kyn-thead ?stickyHeader=${this.stickyHeader}>\n            <kyn-tr>\n              ${this.checkboxSelection\n                ? html` <kyn-th .align=${'center'} ?dense=${this.dense}\n                    ><kyn-checkbox\n                      .indeterminate=${this.headerCheckboxIndeterminate}\n                      .checked=${this.headerCheckboxChecked}\n                      visiblyHidden\n                      @on-checkbox-change=${this.toggleSelectionAll}\n                      >Select All Items</kyn-checkbox\n                    >\n                  </kyn-th>`\n                : null}\n              ${this.columns.map(\n                ({ sortable, sortFn, field, align, headerName }) =>\n                  html`<kyn-th\n                    ?dense=${this.dense}\n                    .sortable=${sortable}\n                    @on-sort-changed=${sortFn}\n                    sortKey=${field}\n                    .align=${align}\n                    >${headerName}</kyn-th\n                  >`\n              )}\n            </kyn-tr>\n          </kyn-thead>\n          <kyn-tbody .striped=${this.striped}>\n            ${this.rows.map(\n              (row) => html`\n                <kyn-tr\n                  selectable=${ifDefined(this.checkboxSelection)}\n                  class=${classMap({\n                    selected: this.selectedRows.has(row.id),\n                    clickable: this.checkboxSelection,\n                  })}\n                  @on-row-clicked=${() => {\n                    if (this.checkboxSelection) {\n                      this.handleRowSelectionChange(\n                        row.id,\n                        !this.selectedRows.has(row.id)\n                      );\n                    }\n                  }}\n                >\n                  ${this.checkboxSelection\n                    ? html` <kyn-td .align=${'center'} ?dense=${this.dense}>\n                        <kyn-checkbox\n                          visiblyHidden\n                          .checked=${this.selectedRows.has(row.id)}\n                          @on-checkbox-change=${(e: CustomEvent) => {\n                            this.handleRowSelectionChange(\n                              row.id,\n                              e.detail.checked\n                            );\n                          }}\n                          >${row.id}</kyn-checkbox\n                        >\n                      </kyn-td>`\n                    : null}\n                  ${this.columns.map(\n                    (column) => html`\n                      <kyn-td\n                        .align=${column.align}\n                        ?dense=${this.dense}\n                        .maxWidth=${column.maxWidth}\n                        .width=${column.width}\n                        ?ellipsis=${column.ellipsis}\n                      >\n                        ${column.cellRenderer\n                          ? column.cellRenderer({ row, column })\n                          : column.valueGetter\n                          ? column.valueGetter({ row })\n                          : row[column.field]}\n                      </kyn-td>\n                    `\n                  )}\n                </kyn-tr>\n              `\n            )}\n          </kyn-tbody>\n        </kyn-table>\n      </kyn-table-container>\n      ${this.paginationModel?.count > 0\n        ? html` <kyn-pagination\n            .count=${count}\n            .pageSize=${pageSize}\n            .pageNumber=${pageNumber}\n            .pageSizeOptions=${pageSizeOptions}\n            .hideItemsRange=${this.hideItemsRange}\n            .hidePageSizeDropdown=${this.hidePageSizeDropdown}\n            .hideNavigationButtons=${this.hideNavigationButtons}\n            @on-page-size-change=${this.onPageSizeChange}\n            @on-page-number-change=${this.onPageNumberChange}\n          ></kyn-pagination>`\n        : null}\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-data-table': DataTable;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, state, property } from 'lit/decorators.js';\nimport '@kyndryl-design-system/shidoka-foundation/components/button';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport exportIcon from '@carbon/icons/es/export/20';\nimport exportIcon16 from '@carbon/icons/es/export/16';\nimport overflowIcon from '@carbon/icons/es/overflow-menu--vertical/20';\nimport trashCanIcon from '@carbon/icons/es/trash-can/20';\nimport styles from './batch-actions.scss';\nimport '../index';\n\n@customElement('batch-actions')\nexport class BatchActions extends LitElement {\n  static override styles = [styles];\n\n  @property({ type: Function })\n  handleDelete = () => {};\n\n  @property({ type: Boolean, reflect: true })\n  opened = false;\n\n  /**\n   * Determines if the component is being rendered on a mobile device.\n   * @ignore\n   */\n  @state()\n  isMobile = window.innerWidth < 768;\n\n  handleClick = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n    this.opened = !this.opened;\n  };\n\n  override render() {\n    return html`\n      <div class=\"action-delete\">\n        <kd-button\n          kind=\"primary-app\"\n          type=\"button\"\n          destructive\n          size=\"small\"\n          @on-click=${this.handleDelete}\n          class=\"delete-button\"\n        >\n          Delete\n        </kd-button>\n        <kd-button\n          kind=\"tertiary\"\n          type=\"button\"\n          destructive\n          size=\"small\"\n          iconposition=\"center\"\n          @on-click=${this.handleDelete}\n          class=\"delete-button__mobile\"\n        >\n          <kd-icon slot=\"icon\" .icon=${trashCanIcon}></kd-icon>\n        </kd-button>\n      </div>\n      <div class=\"vertical-overflow-menu\">\n        <kd-button\n          kind=\"tertiary\"\n          type=\"button\"\n          size=\"small\"\n          iconposition=\"center\"\n          @on-click=${() => (this.opened = !this.opened)}\n        >\n          <kd-icon slot=\"icon\" .icon=${overflowIcon}></kd-icon>\n        </kd-button>\n      </div>\n      <div class=\"menu\">\n        <kyn-table>\n          <kyn-tbody>\n            <kyn-tr class=\"menu-item\" @click=${this.handleClick}>\n              <kyn-td class=\"menu-item__icon\">\n                <kd-button\n                  kind=\"tertiary\"\n                  type=\"button\"\n                  size=\"small\"\n                  iconposition=\"center\"\n                >\n                  <kd-icon slot=\"icon\" .icon=${exportIcon16}></kd-icon>\n                </kd-button>\n              </kyn-td>\n              <kyn-td class=\"menu-item__label\">Export</kyn-td>\n            </kyn-tr>\n            <kyn-tr class=\"menu-item\" @click=${this.handleClick}>\n              <kyn-td class=\"menu-item__icon\"></kyn-td>\n              <kyn-td class=\"menu-item__label\">Action</kyn-td>\n            </kyn-tr>\n          </kyn-tbody>\n        </kyn-table>\n      </div>\n      <div class=\"actions-container\">\n        <div class=\"action-item\">\n          <kd-button\n            kind=\"secondary\"\n            type=\"button\"\n            size=\"small\"\n            iconposition=\"left\"\n          >\n            <kd-icon slot=\"icon\" .icon=${exportIcon}></kd-icon>\n            Export\n          </kd-button>\n        </div>\n        <div class=\"action-item\">\n          <kd-button\n            kind=\"secondary\"\n            type=\"button\"\n            size=\"small\"\n            iconposition=\"right\"\n            description=\"\"\n            href=\"\"\n          >\n            Action\n          </kd-button>\n        </div>\n      </div>\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}