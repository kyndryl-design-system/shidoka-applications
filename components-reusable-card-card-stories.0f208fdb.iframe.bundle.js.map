{"version":3,"file":"components-reusable-card-card-stories.0f208fdb.iframe.bundle.js","mappings":";;AA8CA;AACA;AACA;AACA;AACA;;;AAGA;;AAIA;;;;;;;;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;;;;ACwBA;;AAEA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;;;;;;;;;;AAqFA;;;;;;;AAOA;;;;;AAMA;;ACzEA;AACA;AACA;AACA;;;;;;;;;;;AAcA;AAIA;AACA;AACA;AACA;AACA;;;AAMA;;AAWA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/card/card.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/card/card.sample.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/card/card.content.sample.ts","webpack://@kyndryl-design-system/shidoka-applications/"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport CardScss from './card.scss';\n\n/**\n * DEPRECATED. `kyn-card` Web Component.\n * This is deprecated and moved to Foundation.\n * @fires on-card-click - Captures the click event of clickable card and emits the original event details. Use `e.stopPropogation()` / `e.preventDefault()` for any internal clickable elements when card type is `'clickable'` to stop bubbling / prevent event.\n * @slot unnamed - Slot for card contents.\n */\n\n@customElement('kyn-card')\nexport class Card extends LitElement {\n  static override styles = CardScss;\n\n  /** Card Type. `'normal'` & `'clickable'` */\n  @property({ type: String })\n  type = 'normal';\n\n  /** Card link url for clickable cards. */\n  @property({ type: String })\n  href = '';\n\n  /** Use for Card type `'clickable'`. Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship. */\n  @property({ type: String })\n  rel = '';\n\n  /** Defines a target attribute for where to load the URL in case of clickable card. Possible options include \"_self\" (deafult), \"_blank\", \"_parent\", \"_top\" */\n  @property({ type: String })\n  target = '_self';\n\n  /** Hide card border. Useful when clickable card use inside `<kyn-notification>` component. */\n  @property({ type: Boolean })\n  hideBorder = false;\n\n  override render() {\n    const cardWrapperClasses = {\n      'card-wrapper-clickable': true,\n      'card-border': this.hideBorder === false,\n    };\n\n    return html`${this.type === 'clickable'\n      ? html`<a\n          part=\"card-wrapper\"\n          class=\"${classMap(cardWrapperClasses)}\"\n          href=${this.href}\n          target=${this.target}\n          rel=${this.rel}\n          @click=${(e: Event) => this.handleClick(e)}\n        >\n          <slot></slot>\n        </a>`\n      : html`<div class=\"card-wrapper\">\n          <slot></slot>\n        </div>`} `;\n  }\n\n  private handleClick(e: Event) {\n    const event = new CustomEvent('on-card-click', {\n      detail: { origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-card': Card;\n  }\n}\n","import { html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport CardSampleScss from './cardSample.scss';\n\n/**  Sample Lit component to show card pattern. */\n@customElement('sample-card-component')\nexport class SampleCardComponent extends LitElement {\n  static override styles = CardSampleScss;\n\n  override render() {\n    return html`\n      <div class=\"card-logo-container\">\n        <div class=\"card-logo\">\n          <img\n            class=\"card-logo-img\"\n            src=\"https://fastly.picsum.photos/id/163/32/32.jpg?hmac=6Ev67xrdofIgcyzhr8G7E_OCYUUziK4DoqoH3XZ4I08\"\n            alt=\"product logo\"\n          />\n        </div>\n      </div>\n      <h1 class=\"card-title\">\n        <slot name=\"title\"></slot>\n      </h1>\n      <div class=\"card-subtitle\">This is card subtitle</div>\n      <div class=\"card-description\">\n        <slot name=\"description\"></slot>\n      </div>\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sample-card-component': SampleCardComponent;\n  }\n}\n","import { html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport CardSampleScss from './cardSample.scss';\nimport '../overflowMenu';\nimport '../tag';\n\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport '@kyndryl-design-system/shidoka-foundation/components/button';\nimport actionIcon from '@carbon/icons/es/bookmark/20';\n\n/**  Sample Lit component to show containable items inside Card. */\n@customElement('sample-card-content-component')\nexport class SampleCardContentComponent extends LitElement {\n  static override styles = CardSampleScss;\n\n  override render() {\n    const tagGroupArr = [\n      {\n        value: '1',\n        text: 'Tag 1',\n      },\n      {\n        value: '2',\n        text: 'Tag 2',\n      },\n      {\n        value: '3',\n        text: 'Tag 3',\n      },\n      {\n        value: '4',\n        text: 'Tag 4',\n      },\n    ];\n    return html`\n      <div class=\"card-logo-container\">\n        <div class=\"card-logo\">\n          <img\n            class=\"card-logo-img\"\n            src=\"https://fastly.picsum.photos/id/163/32/32.jpg?hmac=6Ev67xrdofIgcyzhr8G7E_OCYUUziK4DoqoH3XZ4I08\"\n            alt=\"product logo\"\n          />\n        </div>\n        <div class=\"card-logo-right\">\n          <div class=\"card-actions\">\n            <!-- Example : Card action button -->\n            <div class=\"card-action-btn-class\">\n              <kd-button\n                kind=\"tertiary\"\n                size=\"small\"\n                iconPosition=\"center\"\n                description=\"Action\"\n                @click=${(e: Event) => e.preventDefault()}\n              >\n                <kd-icon slot=\"icon\" .icon=${actionIcon}></kd-icon>\n              </kd-button>\n            </div>\n\n            <div class=\"card-option-wrapper\">\n              <!-- Example : overflow menu -->\n              <!-- Note : Use e.stopPropogation() / e.preventDefault() for any internal clickable elements when card type is 'clickable' to stop bubbling / prevent event -->\n              <kyn-overflow-menu @click=${(e: any) => e.preventDefault()}>\n                <kyn-overflow-menu-item>Option 1</kyn-overflow-menu-item>\n                <kyn-overflow-menu-item>Option 2</kyn-overflow-menu-item>\n              </kyn-overflow-menu>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- Example : Card Thumbnail -->\n      <img\n        class=\"card-thumbnail-img\"\n        alt=\"Card thumbnail\"\n        src=\"https://fastly.picsum.photos/id/521/216/128.jpg?hmac=r5KpZKHm2EaJAOKiLrULNwt5HEtevAOPle1qwxV6V3E\"\n      />\n\n      <h1 class=\"card-title\">This is a card title</h1>\n      <div class=\"card-subtitle\">This is card subtitle</div>\n      <div class=\"card-description\">\n        Amazon EC2 Auto Scaling ensures that your application always has the\n        right amount of compute capacity by dynamically adjusting the number of\n        Amazon EC2 instances based on demand.\n      </div>\n\n      <div class=\"tags\">\n        <!-- Example : Tags -->\n        <kyn-tag-group>\n          ${tagGroupArr.map(\n            (tag) =>\n              html` <kyn-tag label=${tag.text} tagColor=\"spruce\"></kyn-tag> `\n          )}\n        </kyn-tag-group>\n      </div>\n\n      <!-- Example : Card links -->\n      <div class=\"card-link\">\n        <div class=\"card-link-elements\">\n          <kd-button\n            href=\"#\"\n            kind=\"tertiary\"\n            size=\"small\"\n            @click=${(e: Event) => e.preventDefault()}\n            >Link 1</kd-button\n          >\n          <kd-button\n            href=\"#\"\n            kind=\"tertiary\"\n            size=\"small\"\n            @click=${(e: Event) => e.preventDefault()}\n            >Link 2</kd-button\n          >\n        </div>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sample-card-content-component': SampleCardContentComponent;\n  }\n}\n"],"names":[],"sourceRoot":""}