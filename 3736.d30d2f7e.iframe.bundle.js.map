{"version":3,"file":"3736.d30d2f7e.iframe.bundle.js","mappings":";AAiDA;AAEA;ACAA;;;AAGA;;AAEA;;AAEA;;AAGA;AACA;;AAEA;;;;AAMA;;;;;;ACCA;AACA;;;AAGA;;AAEA;AAGA;AC7EA;;;;;;;ADqFA;AACA;;;AAGA;;AAGA;AENA;;AAGA;AACA;AACA;;;AAIA;;AAKA;AACA;AACA;AACA;;;AAIA;;AAGA;AACA;AACA;;;AAKA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/pagination/pagination-items-range.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/pagination/pagination-page-size-dropdown.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/pagination/pagination-navigation-buttons.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/pagination/constants.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/pagination/Pagination.ts"],"sourcesContent":["import { html, LitElement } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\n\nimport { SHOWING_TEXT, OF_TEXT, ITEMS_TEXT, BREAKPOINT } from './constants';\nimport styles from './pagination-items-range.scss';\n\n/**\n * `kyn-pagination-items-range` Web Component.\n *\n * This component is responsible for displaying the range of items being displayed\n * in the context of pagination. It shows which items (by number) are currently visible\n * and the total number of items.\n */\n@customElement('kyn-pagination-items-range')\nexport class PaginationItemsRange extends LitElement {\n  static override styles = [styles];\n\n  /** Total number of items. */\n  @property({ type: Number })\n  count = 0;\n\n  /** Current page number being displayed. */\n  @property({ type: Number })\n  pageNumber = 1;\n\n  /** Number of items displayed per page. */\n  @property({ type: Number })\n  pageSize = 10;\n\n  /**\n   * Determines the device type the component is being rendered on.\n   * @ignore\n   */\n  @state()\n  isMobile = window.innerWidth < BREAKPOINT;\n\n  private get itemsRangeText(): string {\n    const baseTotalItemsByPage = this.pageSize * this.pageNumber;\n    const lowerRangeItemsCount = baseTotalItemsByPage - this.pageSize + 1;\n    const higherRangeItemsCount =\n      baseTotalItemsByPage < this.count ? baseTotalItemsByPage : this.count;\n\n    return this.isMobile\n      ? `${lowerRangeItemsCount}\\u2014${higherRangeItemsCount} ${OF_TEXT} ${this.count}`\n      : `${SHOWING_TEXT} ${lowerRangeItemsCount} \\u2014 ${higherRangeItemsCount} ${OF_TEXT} ${this.count} ${ITEMS_TEXT}`;\n  }\n\n  override render() {\n    return html`\n      <span role=\"status\" aria-live=\"polite\">${this.itemsRangeText}</span>\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-pagination-items-range': PaginationItemsRange;\n  }\n}\n","import { html, LitElement } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\n\nimport '../dropdown/dropdown';\nimport '../dropdown/dropdownOption';\n\nimport styles from './pagination-page-size-dropdown.scss';\nimport { PAGE_SIZE_LABEL } from './constants';\n\n/**\n * `kyn-pagination-page-size-dropdown` Web Component.\n *\n * This component provides a dropdown to select the page size for pagination.\n * It emits events when the selected page size changes.\n *\n * @fires on-page-size-change - The event fired when the page size changes.\n */\n@customElement('kyn-pagination-page-size-dropdown')\nexport class PaginationPageSizeDropdown extends LitElement {\n  static override styles = [styles];\n\n  /** Current page size. */\n  @property({ type: Number })\n  pageSize = 5;\n\n  /** Label for the page size dropdown. */\n  @property({ type: String })\n  pageSizeLabel = PAGE_SIZE_LABEL;\n\n  /** Available options for the page size. */\n  @property({ type: Array })\n  pageSizeOptions: Array<number> = [5, 10, 20, 30, 40, 50];\n\n  /**\n   * Handles the dropdown change event.\n   * @param {CustomEvent} event - The dropdown change event.\n   */\n  private handleChange(event: CustomEvent) {\n    this.pageSize = event.detail.value;\n\n    this.dispatchEvent(\n      new CustomEvent('on-page-size-change', {\n        detail: { value: event.detail.value },\n        bubbles: true, // So that parent components can catch it\n        composed: true, // Required for the event to pass through the Shadow DOM boundary\n      })\n    );\n  }\n\n  override render() {\n    return html`\n      <label> ${this.pageSizeLabel} </label>\n      <kyn-dropdown\n        inline\n        placeholder=${this.pageSize}\n        size=\"sm\"\n        @on-change=${(e: CustomEvent) => this.handleChange(e)}\n      >\n        ${this.pageSizeOptions.map((option) => {\n          return html`\n            <kyn-dropdown-option\n              ?selected=${this.pageSize === option}\n              value=${option}\n            >\n              ${option}\n            </kyn-dropdown-option>\n          `;\n        })}\n      </kyn-dropdown>\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-pagination-page-size-dropdown': PaginationPageSizeDropdown;\n  }\n}\n","import { html, LitElement } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\n\n// Import required components and icons\nimport '@kyndryl-design-system/shidoka-foundation/components/button';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport chevLeftIcon from '@carbon/icons/es/chevron--left/16';\nimport chevRightIcon from '@carbon/icons/es/chevron--right/16';\n\nimport styles from './pagination-navigation-buttons.scss';\nimport { OF_TEXT, PAGES_TEXT, BREAKPOINT } from './constants';\n\n/**\n * `kyn-pagination-navigation-buttons` Web Component.\n *\n * This component provides navigational controls for pagination.\n * It includes back and next buttons, along with displaying the current page and total pages.\n *\n * @fires on-page-number-change - Dispatched when the page number is changed.\n */\n@customElement('kyn-pagination-navigation-buttons')\nexport class PaginationNavigationButtons extends LitElement {\n  static override styles = [styles];\n\n  // Current page number, defaults to 0\n  @property({ type: Number, reflect: true })\n  pageNumber = 0;\n\n  // Total number of pages, defaults to 0\n  @property({ type: Number, reflect: true })\n  numberOfPages = 0;\n\n  /**\n   * Determines the device type the component is being rendered on.\n   * @ignore\n   */\n  @state()\n  isMobile = window.innerWidth < BREAKPOINT;\n\n  // Constant representing the smallest possible page number\n  private readonly SMALLEST_PAGE_NUMBER = 1;\n\n  /**\n   * Handles the button click event, either moving to the next page or previous page\n   * @param {boolean} next - If true, will move to the next page, otherwise to the previous page\n   */\n  private handleButtonClick(next: boolean) {\n    const currentPage = next ? this.pageNumber + 1 : this.pageNumber - 1;\n    this.pageNumber = currentPage;\n\n    // Dispatch a custom event to notify about the page change\n    this.dispatchEvent(\n      new CustomEvent('on-page-number-change', {\n        detail: { value: currentPage },\n        bubbles: true, // Allows parent components to catch it\n        composed: true, // Required for the event to pass through the Shadow DOM boundary\n      })\n    );\n  }\n\n  override render() {\n    const disableBackButton = this.pageNumber <= this.SMALLEST_PAGE_NUMBER;\n    const disableNextButton = this.pageNumber >= this.numberOfPages;\n\n    // Render back button, current page number, and next button\n    return html`\n      <kd-button\n        iconposition=\"center\"\n        kind=\"tertiary\"\n        type=\"button\"\n        size=\"small\"\n        ?disabled=${disableBackButton}\n        @on-click=${() => this.handleButtonClick(false)}\n        description=\"Previous page\"\n      >\n        <kd-icon slot=\"icon\" .icon=${chevLeftIcon}></kd-icon>\n      </kd-button>\n      ${this.isMobile\n        ? null\n        : html` <span role=\"status\" aria-live=\"polite\">\n            ${this.pageNumber} ${OF_TEXT} ${this.numberOfPages}\n            ${PAGES_TEXT}</span\n          >`}\n      <kd-button\n        iconposition=\"center\"\n        kind=\"tertiary\"\n        type=\"button\"\n        size=\"small\"\n        ?disabled=${disableNextButton}\n        @on-click=${() => this.handleButtonClick(true)}\n        description=\"Next page\"\n      >\n        <kd-icon slot=\"icon\" .icon=${chevRightIcon}></kd-icon>\n      </kd-button>\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-pagination-navigation-buttons': PaginationNavigationButtons;\n  }\n}\n","export const SHOWING_TEXT = 'Showing'\nexport const OF_TEXT = 'of'\nexport const ITEMS_TEXT = 'items'\nexport const PAGES_TEXT = 'pages'\nexport const PAGE_SIZE_LABEL = 'Items Per Page:'\nexport const BREAKPOINT = 768\n\n","import { html, LitElement } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\nimport { PAGE_SIZE_LABEL, BREAKPOINT } from './constants';\nimport styles from './pagination.scss';\n\nimport './pagination-items-range';\nimport './pagination-page-size-dropdown';\nimport './pagination-navigation-buttons';\n\n/**\n * `kyn-pagination` Web Component.\n *\n * A component that provides pagination functionality, enabling the user to\n * navigate through large datasets by splitting them into discrete chunks.\n * Integrates with other utility components like items range display, page size dropdown,\n * and navigation buttons.\n * @fires on-page-size-change - Dispatched when the page size changes.\n * @fires on-page-number-change - Dispatched when the currently active page changes.\n *\n */\n@customElement('kyn-pagination')\nexport class Pagination extends LitElement {\n  static override styles = [styles];\n\n  /** Total number of items that need pagination. */\n  @property({ type: Number })\n  count = 0;\n\n  /** Current active page number.*/\n  @property({ type: Number, reflect: true })\n  pageNumber = 1;\n\n  /** Number of items displayed per page.*/\n  @property({ type: Number })\n  pageSize = 5;\n\n  /** Available options for the page size.*/\n  @property({ type: Array })\n  pageSizeOptions: number[] = [5, 10, 20, 30, 40, 50, 100];\n\n  /** Label for the page size dropdown.*/\n  @property({ type: String })\n  pageSizeLabel = PAGE_SIZE_LABEL;\n\n  /** Option to hide the items range display. */\n  @property({ type: Boolean })\n  hideItemsRange = false;\n\n  /** Option to hide the page size dropdown. */\n  @property({ type: Boolean })\n  hidePageSizeDropdown = false;\n\n  /** Option to hide the navigation buttons. */\n  @property({ type: Boolean })\n  hideNavigationButtons = false;\n\n  /**\n   * Determines the device type the component is being rendered on.\n   * @ignore\n   */\n  @state()\n  isMobile = window.innerWidth < BREAKPOINT;\n\n  /**\n   * Handler for the event when the page size is changed by the user.\n   * Updates the `pageSize` and resets the `pageNumber` to 1.\n   *\n   * @param e - The emitted custom event with the selected page size.\n   */\n  private handlePageSizeChange(e: CustomEvent) {\n    this.pageSize = e.detail.value;\n    this.pageNumber = 1;\n  }\n\n  /**\n   * Handler for the event when the page number is changed by the user.\n   * Updates the `pageNumber`.\n   *\n   * @param e - The emitted custom event with the selected page number.\n   */\n  private handlePageNumberChange(e: CustomEvent) {\n    this.pageNumber = e.detail.value;\n  }\n\n  override render() {\n    const numberOfPages = Math.ceil(this.count / this.pageSize);\n\n    return html`\n      ${!this.hideItemsRange\n        ? html`\n            <kyn-pagination-items-range\n              .pageNumber=${this.pageNumber}\n              .pageSize=${this.pageSize}\n              .count=${this.count}\n            ></kyn-pagination-items-range>\n          `\n        : null}\n      ${this.isMobile\n        ? null\n        : !this.hidePageSizeDropdown\n        ? html`\n            <kyn-pagination-page-size-dropdown\n              .pageSize=${this.pageSize}\n              .pageSizeOptions=${this.pageSizeOptions}\n              .pageSizeLabel=${this.pageSizeLabel}\n              @on-page-size-change=${this.handlePageSizeChange}\n            ></kyn-pagination-page-size-dropdown>\n          `\n        : null}\n      ${!this.hideNavigationButtons\n        ? html`\n            <kyn-pagination-navigation-buttons\n              .pageNumber=${this.pageNumber}\n              .numberOfPages=${numberOfPages}\n              @on-page-number-change=${this.handlePageNumberChange}\n            ></kyn-pagination-navigation-buttons>\n          `\n        : null}\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-pagination': Pagination;\n  }\n}\n"],"names":[],"sourceRoot":""}