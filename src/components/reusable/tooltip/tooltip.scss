@use '../../../common/scss/global.scss';
@use '@kyndryl-design-system/shidoka-foundation/scss/mixins/typography.scss';

:host {
  display: inline-block;
}

.tooltip {
  display: block;
  position: relative;
}

button {
  display: block;
  appearance: none;
  background: none;
  border: none; /* this must come BEFORE anchor overrides below */
  color: inherit;
  font: inherit;
  padding: 0;
  cursor: pointer;
  border-radius: 4px;
  outline: 2px solid transparent;
  transition: outline-color 150ms ease-out;

  /* default solid ring when AI vars aren't provided */
  &:focus-visible {
    outline-color: var(
      --kyn-tooltip-focus-outline-color,
      var(--kd-color-border-variants-focus)
    );
  }
}

button.anchor {
  /* will be toggled on focus via custom prop */
  border: var(--_aiRingW, 0) solid transparent;
  border-radius: var(--kyn-tooltip-outline-radius, 4px);

  background: linear-gradient(
        var(--kyn-tooltip-outline-surface, transparent),
        var(--kyn-tooltip-outline-surface, transparent)
      )
      padding-box,
    var(
        --kyn-tooltip-outline-gradient,
        linear-gradient(transparent, transparent)
      )
      border-box;

  background-clip: padding-box, border-box;
  background-origin: border-box, border-box;
  background-size: calc(100% + 2px) calc(100% + 2px), cover;
  background-position: center, center;
  background-repeat: no-repeat, no-repeat;
}

button.anchor:focus-visible {
  --_aiRingW: calc(
    var(--kyn-tooltip-ai-active, 0) * var(--kyn-tooltip-outline-width, 1px)
  );
}

.info-icon,
slot[name='anchor']::slotted(span.info-icon),
slot[name='anchor']::slotted(svg) {
  display: block;
}

.content {
  @include typography.type-body-02;
  font-weight: initial;
  text-transform: initial;
  cursor: initial;
  inline-size: max-content;
  max-inline-size: 288px;
  position: fixed;
  background: var(--kd-color-background-ui-default-dark);
  color: var(--kd-color-text-variant-inversed);
  padding: 24px;
  border-radius: 4px;
  z-index: 5000;
  transition: visibility 150ms ease-out, transform 150ms ease-out;
  visibility: hidden;
  transform-origin: center bottom;
  transform: translate3d(-50%, calc(-100% - 8px), 0) scale(0);

  &::before {
    content: '';
    display: block;
    width: 0;
    height: 0;
    position: absolute;
    bottom: -6px;
    left: calc(50% - 6px);
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid var(--kd-color-background-ui-default-dark);
  }

  &.open {
    visibility: visible;
    transform: translate3d(-50%, calc(-100% - 8px), 0) scale(1);
  }

  &.anchor--start {
    transform: translate3d(-14px, calc(-100% - 8px), 0) scale(0);
    transform-origin: left bottom;

    &.open {
      transform: translate3d(-14px, calc(-100% - 8px), 0) scale(1);
    }

    &::before {
      left: 8px;
    }
  }

  &.anchor--end {
    transform: translate3d(calc(-100% + 14px), calc(-100% - 8px), 0) scale(0);
    transform-origin: right bottom;

    &.open {
      transform: translate3d(calc(-100% + 14px), calc(-100% - 8px), 0) scale(1);
    }

    &::before {
      left: auto;
      right: 8px;
    }
  }

  &.direction--bottom {
    transform: translate3d(-50%, 8px, 0) scale(0);
    transform-origin: center top;

    &.open {
      transform: translate3d(-50%, 8px, 0) scale(1);
    }

    &::before {
      bottom: auto;
      top: -6px;
      border-top: none;
      border-bottom: 6px solid var(--kd-color-background-ui-default-dark);
    }

    &.anchor--start {
      transform: translate3d(-14px, 8px, 0) scale(0);
      transform-origin: left top;

      &.open {
        transform: translate3d(-14px, 8px, 0) scale(1);
      }
    }

    &.anchor--end {
      transform: translate3d(calc(-100% + 14px), 8px, 0) scale(0);
      transform-origin: right top;

      &.open {
        transform: translate3d(calc(-100% + 14px), 8px, 0) scale(1);
      }
    }
  }

  &.direction--left {
    transform: translate3d(calc(-100% - 8px), -50%, 0) scale(0);
    transform-origin: center right;

    &.open {
      transform: translate3d(calc(-100% - 8px), -50%, 0) scale(1);
    }

    &::before {
      left: auto;
      right: -6px;
      top: calc(50% - 6px);
      border-left: 6px solid var(--kd-color-background-ui-default-dark);
      border-bottom: 6px solid transparent;
      border-top: 6px solid transparent;
      border-right: none;
    }

    &.anchor--start {
      transform: translate3d(calc(-100% - 8px), -14px, 0) scale(0);
      transform-origin: right top;

      &.open {
        transform: translate3d(calc(-100% - 8px), -14px, 0) scale(1);
      }

      &::before {
        top: 8px;
      }
    }

    &.anchor--end {
      transform: translate3d(calc(-100% - 8px), calc(-100% + 14px), 0) scale(0);
      transform-origin: bottom right;

      &.open {
        transform: translate3d(calc(-100% - 8px), calc(-100% + 14px), 0)
          scale(1);
      }

      &::before {
        top: auto;
        bottom: 8px;
      }
    }
  }

  &.direction--right {
    transform: translate3d(8px, -50%, 0) scale(0);
    transform-origin: center left;

    &.open {
      transform: translate3d(8px, -50%, 0) scale(1);
    }

    &::before {
      left: -6px;
      top: calc(50% - 6px);
      border-right: 6px solid var(--kd-color-background-ui-default-dark);
      border-bottom: 6px solid transparent;
      border-top: 6px solid transparent;
      border-left: none;
    }

    &.anchor--start {
      transform: translate3d(8px, -14px, 0) scale(0);
      transform-origin: left top;

      &.open {
        transform: translate3d(8px, -14px, 0) scale(1);
      }

      &::before {
        top: 8px;
      }
    }

    &.anchor--end {
      transform: translate3d(8px, calc(-100% + 14px), 0) scale(0);
      transform-origin: left bottom;

      &.open {
        transform: translate3d(8px, calc(-100% + 14px), 0) scale(1);
      }

      &::before {
        top: auto;
        bottom: 8px;
      }
    }
  }
}
