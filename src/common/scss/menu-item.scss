@use './global.scss';
@use '@kyndryl-design-system/shidoka-foundation/scss/mixins/elevation.scss';
@use '@kyndryl-design-system/shidoka-foundation/scss/mixins/typography.scss';
@use '../../common/scss/gradients.scss' as gradient;

// ==== base host ====
:host,
:host(:focus),
:host(:focus-visible) {
  outline: none;
}

// ==== mixins ====
@mixin state-colors($bg, $text, $icon: null) {
  background-color: $bg;

  .menu-item-inner-el {
    color: $text;
  }

  @if $icon != null {
    slot[name='icon']::slotted(span) {
      color: $icon;
    }
  }
}

@mixin disabled-common($bg-default) {
  color: var(--kd-color-text-level-disabled);

  .menu-item-inner-el {
    color: var(--kd-color-text-level-disabled);
  }

  &,
  & * {
    cursor: not-allowed;
  }

  &:hover {
    background-color: $bg-default;
  }
}

@mixin destructive-common {
  color: var(--kd-color-text-variant-destructive);
  border-top: 1px solid var(--kd-color-border-level-tertiary);

  .menu-item-inner-el {
    color: var(--kd-color-text-variant-destructive);
  }

  &:hover:not([disabled]) {
    background-color: var(--kd-color-status-error-light);
  }
}

@mixin border-gradient-ai(
  $gradient,
  $radius: 4px,
  $width: 1px,
  $surface: transparent
) {
  box-sizing: border-box;
  border: $width solid transparent;
  border-radius: $radius;
  background: linear-gradient(#{$surface}, #{$surface}) padding-box,
    #{$gradient} border-box;
  background-clip: padding-box, border-box;
}

// ==== defaults ====
.menu-item {
  background-color: var(--kd-color-background-menu-state-default);
  transition: background-color 150ms ease-out;

  .menu-item-inner-el {
    color: var(--kd-color-text-level-primary);
    transition: color 150ms ease-out;

    &.check-icon {
      color: var(--kd-color-icon-primary);
    }
  }

  // --- state precedence ---

  // 1) disabled
  &[disabled] {
    @include disabled-common(var(--kd-color-background-menu-state-default));
    outline: none;
  }

  // 2) readonly (non-disabled)
  &[readonly]:not([disabled]) {
    cursor: default;
    border: none;
    background-color: var(--kd-color-background-menu-state-default);
    outline: none;

    // keep visual stable on interactions
    &:is(:hover, :active, :focus, :focus-visible) {
      background-color: var(--kd-color-background-menu-state-default);
      border: none;
      outline: none;

      .menu-item-inner-el {
        color: var(--kd-color-text-level-primary);
      }
      & .check-icon {
        color: var(--kd-color-icon-primary);
      }
      slot[name='icon']::slotted(span) {
        color: var(--kd-color-icon-primary);
      }
    }

    // selected + readonly
    &[selected] {
      background-color: var(--kd-color-background-forms-default);

      &:is(:hover, :active) {
        background-color: var(--kd-color-background-forms-default);
      }
    }

    // highlighted/active guard
    &:is(:active, [highlighted]) {
      background: var(--kd-color-background-forms-default) !important;
    }
  }

  // 3) active / pressed (non-disabled, non-readonly)
  // (intentionally handled later for AI + non-AI to ensure precedence)

  // 4) focus/open (non-disabled, non-readonly)
  &:is(:focus, :focus-within, :focus-visible):not([disabled]):not([readonly]) {
    @include state-colors(
      var(--kd-color-background-menu-state-open),
      var(--kd-color-text-level-primary)
    );
    outline: 2px solid var(--kd-color-border-variants-focus);
    outline-offset: -2px;
  }

  // 5) hover (non-disabled, non-readonly, non-AI)
  &:hover:not([disabled]):not([readonly]):not(.ai-connected) {
    @include state-colors(
      var(--kd-color-background-menu-state-hover),
      var(--kd-color-text-level-light),
      var(--kd-color-icon-light)
    );
  }

  // 6) selected (non-disabled)
  &[selected]:not([disabled]) {
    @include state-colors(
      var(--kd-color-background-menu-state-open),
      var(--kd-color-text-level-primary)
    );

    &:hover {
      @include state-colors(
        var(--kd-color-background-menu-state-hover),
        var(--kd-color-text-level-light)
      );
    }
  }

  // 7) highlighted (non-disabled)
  &[highlighted]:not([disabled]) {
    @include state-colors(
      var(--kd-color-background-menu-state-hover),
      var(--kd-color-text-level-light)
    );
    // default focus ring for non-AI
    outline: 1px solid var(--kd-color-border-variants-focus);
  }

  // ---- modifiers ----

  // AI variant (base)
  &.ai-connected {
    background-color: var(--kd-color-background-menu-state-ai-default);
    color: var(--kd-color-text-level-primary);

    // focus/open
    &:is(:focus, :focus-within, :focus-visible):not([disabled]):not(
        [readonly]
      ) {
      @include state-colors(
        var(--kd-color-background-menu-state-ai-open),
        var(--kd-color-text-level-primary)
      );
      outline: 2px solid var(--kd-color-border-button-ai-state-focused);
      outline-offset: -2px !important;
    }

    // hover — text must be primary (not disabled/readonly)
    // (do NOT show gradient while pressed)
    &:hover:not([disabled]):not([readonly]):not(.option-is-readonly):not(
        [data-pressed]
      ):not(:active) {
      background-color: var(--kd-color-background-menu-state-ai-hover);

      .menu-item-inner-el {
        color: var(--kd-color-text-level-primary);
      }
      slot[name='icon']::slotted(span),
      .check-icon {
        color: var(--kd-color-icon-primary);
      }
    }

    // active/pressed — replace entire background so it overrides any gradient layers
    &:is(:active, [data-pressed]):not([disabled]):not([readonly]) {
      background: var(--kd-color-background-menu-state-ai-pressed);
      outline: none;
      border: none;

      .menu-item-inner-el {
        color: var(--kd-color-text-level-primary);
      }
      slot[name='icon']::slotted(span),
      .check-icon {
        color: var(--kd-color-icon-primary);
      }
    }

    // selected / highlighted base
    &:is([selected], [highlighted]):not([disabled]):not([readonly]) {
      @include state-colors(
        var(--kd-color-background-menu-state-ai-open),
        var(--kd-color-text-level-primary)
      );
    }

    // selected/highlighted + hover — keep text primary (no downgrade to light)
    &:is([selected], [highlighted]):hover:not([disabled]):not([readonly]) {
      @include state-colors(
        var(--kd-color-background-menu-state-ai-hover),
        var(--kd-color-text-level-primary)
      );
      slot[name='icon']::slotted(span),
      .check-icon {
        color: var(--kd-color-icon-primary);
      }
    }

    // gradient border only when highlighted
    &[highlighted]:not([disabled]):not([readonly]) {
      outline: none;
      @include border-gradient-ai(
        $gradient: gradient.$ai-gradient-default,
        $radius: 0,
        $width: 1px,
        $surface: var(--kd-color-background-menu-state-ai-focused)
      );
    }

    // disabled within AI
    &[disabled] {
      @include disabled-common(
        var(--kd-color-background-menu-state-ai-default)
      );
    }
  }

  // Destructive variant
  &.destructive {
    @include destructive-common;
  }
}

// ---- pressed states (non-AI) ----
.menu-item:is(:active, [data-pressed]):not(:hover):not([disabled]):not(
    [readonly]
  ),
.menu-item:is(:active, [data-pressed]):hover:not([disabled]):not([readonly]),
.menu-item[selected]:is(:active, [data-pressed]):hover:not([disabled]):not(
    [readonly]
  ),
.menu-item[highlighted]:is(:active, [data-pressed]):hover:not([disabled]):not(
    [readonly]
  ) {
  @include state-colors(
    var(--kd-color-background-menu-state-pressed),
    var(--kd-color-text-level-light)
  );
  outline: none;
}

// ---- pressed states (AI) ----
// ensure we beat the AI hover rule and remove any gradient background layers
.menu-item.ai-connected:is(:active, [data-pressed]):not([readonly]):not(
    [disabled]
  ) {
  background: var(--kd-color-background-menu-state-ai-pressed);
  outline: none;
  border: none;

  .menu-item-inner-el {
    color: var(--kd-color-text-density-darker);
  }
  slot[name='icon']::slotted(span),
  .check-icon {
    color: var(--kd-color-icon-primary);
  }
}

.menu-item:is(:focus, :focus-within, :focus-visible) {
  outline: none;
}
