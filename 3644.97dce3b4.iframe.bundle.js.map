{"version":3,"file":"3644.97dce3b4.iframe.bundle.js","mappings":";AAkEA;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAKA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/toggleButton/toggleButton.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport ToggleButtonScss from './toggleButton.scss';\n\n/**\n * Toggle Button.\n * @fires on-change - Captures the change event and emits the selected value and original event details.\n * @slot unnamed - Slot for label text.\n */\n@customElement('kyn-toggle-button')\nexport class ToggleButton extends LitElement {\n  static override styles = ToggleButtonScss;\n\n  /** @ignore */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Associate the component with forms.\n   * @ignore\n   */\n  static formAssociated = true;\n\n  /**\n   * Attached internals for form association.\n   * @ignore\n   */\n  @state()\n  internals = this.attachInternals();\n\n  /** Input name. */\n  @property({ type: String })\n  name = '';\n\n  /** Input value. */\n  @property({ type: String })\n  value = '';\n\n  /** Checkbox checked state. */\n  @property({ type: Boolean })\n  checked = false;\n\n  /** Checked state text. */\n  @property({ type: String })\n  checkedText = 'On';\n\n  /** Unchecked state text. */\n  @property({ type: String })\n  uncheckedText = 'Off';\n\n  /** Option to use small size. */\n  @property({ type: Boolean })\n  small = false;\n\n  /** Checkbox disabled state. */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /** Reverse UI element order, label on the left. */\n  @property({ type: Boolean })\n  reverse = false;\n\n  override render() {\n    return html`\n      <div class=\"toggle-button\" ?disabled=${this.disabled}>\n        <label class=\"label-text\" for=${this.name}>\n          <slot></slot>\n        </label>\n\n        <div class=\"wrapper ${this.reverse ? 'reverse' : ''}\">\n          <input\n            class=\"${this.small ? 'size--sm' : ''}\"\n            type=\"checkbox\"\n            name=${this.name}\n            id=${this.name}\n            value=${this.value}\n            .checked=${this.checked}\n            ?checked=${this.checked}\n            ?disabled=${this.disabled}\n            @change=${(e: any) => this.handleChange(e)}\n          />\n\n          <span class=\"status-text\">\n            ${this.checked ? this.checkedText : this.uncheckedText}\n          </span>\n        </div>\n      </div>\n    `;\n  }\n\n  private handleChange(e: any) {\n    this.checked = e.target.checked;\n    // emit selected value, bubble so it can be captured by the checkbox group\n    const event = new CustomEvent('on-change', {\n      detail: {\n        checked: e.target.checked,\n        value: this.value,\n        origEvent: e,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  override updated(changedProps: any) {\n    if (changedProps.has('checked')) {\n      // set form data value\n      // this.internals.setFormValue(this.checked ? this.value : null);\n    }\n  }\n\n  private _handleFormdata(e: any) {\n    if (this.checked) {\n      e.formData.append(this.name, this.value);\n    }\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n\n    if (this.internals.form) {\n      this.internals.form.addEventListener('formdata', (e) =>\n        this._handleFormdata(e)\n      );\n    }\n  }\n\n  override disconnectedCallback(): void {\n    if (this.internals.form) {\n      this.internals.form.removeEventListener('formdata', (e) =>\n        this._handleFormdata(e)\n      );\n    }\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-toggle-button': ToggleButton;\n  }\n}\n"],"names":[],"sourceRoot":""}