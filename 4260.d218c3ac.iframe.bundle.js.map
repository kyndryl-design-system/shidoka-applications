{"version":3,"file":"4260.d218c3ac.iframe.bundle.js","mappings":";AAmEA;AAEA;AAGA;AACA;;;AAGA;;AAEA;AACA;AAGA;;;AAMA;;AAEA;;AAGA;;AAEA;;;;;;;;;;;;;AAcA;AAEA;AACA;;AAEA;;;AAIA;;;AAIA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/notification/notification.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\nimport NotificationScss from './notification.scss';\nimport '@kyndryl-design-system/shidoka-foundation/components/card';\nimport '../tag';\n/**\n * Notification component.\n * @slot unnamed - Slot for notification message body.\n * @slot actions - Slot for menu.\n * @fires on-notification-click - Emit event for clickable notification.\n */\n\n@customElement('kyn-notification')\nexport class Notification extends LitElement {\n  static override styles = NotificationScss;\n\n  /** Notification Title (Required). */\n  @property({ type: String })\n  notificationTitle = '';\n\n  /** Notification subtitle.(optional) */\n  @property({ type: String })\n  notificationSubtitle = '';\n\n  /** Timestamp of notification. */\n  @property({ type: String })\n  timeStamp = '';\n\n  /** Card href link */\n  @property({ type: String })\n  href = '';\n\n  /** Notification status tag type. `'default'`, `'info'`, `'warning'`, `'success'` & `'error'` */\n  @property({ type: String })\n  tagStatus = 'default';\n\n  /** Notification type. `'normal'` and `'clickable'`. clickable type can be use inside notification panel */\n  @property({ type: String })\n  type = 'normal';\n\n  /** Customizable text strings. */\n  @property({ type: Object })\n  textStrings: any = {\n    success: 'Success',\n    warning: 'Warning',\n    info: 'Info',\n    error: 'Error',\n  };\n\n  /** Set tagColor based on provided tagStatus.\n   * @internal\n   */\n  @state()\n  _tagColor: any = {\n    success: 'passed',\n    warning: 'warning',\n    info: 'cat01',\n    error: 'failed',\n  };\n\n  /** Set notification mark read prop. Required `type: 'clickable'`.*/\n  @property({ type: Boolean, reflect: true })\n  unRead = false;\n\n  override render() {\n    return html`\n      ${this.type === 'clickable'\n        ? html`<kd-card\n            class=\"${this.unRead\n              ? 'notification-mark-unread'\n              : 'notification-mark-read'}\"\n            type=${this.type}\n            href=${this.href}\n            target=\"_blank\"\n            rel=\"noopener\"\n            @on-card-click=${(e: any) => this._handleCardClick(e)}\n            hideBorder\n            >${this.renderInnerUI()}</kd-card\n          >`\n        : html`<kd-card type=${this.type}>${this.renderInnerUI()}</kd-card>`}\n    `;\n  }\n\n  private renderInnerUI() {\n    return html`<div class=\"notification-wrapper\">\n      <div class=\"notification-title-wrap\">\n        <div class=\"notification-head\">\n          <h1 class=\"notification-title\">${this.notificationTitle}</h1>\n\n          ${this.notificationSubtitle !== ''\n            ? html`\n                <div class=\"notification-subtitle\">\n                  ${this.notificationSubtitle}\n                </div>\n              `\n            : null}\n        </div>\n        <div>\n          <slot name=\"actions\"></slot>\n        </div>\n      </div>\n\n      <div class=\"notification-description\">\n        <slot></slot>\n      </div>\n\n      <div class=\"notification-content-wrapper\">\n        <div class=\"status-tag\">\n          ${this.tagStatus !== 'default'\n            ? html` <kyn-tag\n                label=${this.textStrings[this.tagStatus]}\n                tagColor=${this._tagColor[this.tagStatus]}\n                shade=\"dark\"\n              ></kyn-tag>`\n            : null}\n        </div>\n        <div class=\"timestamp-wrapper\">\n          <div class=\"timestamp-text\">${this.timeStamp}</div>\n        </div>\n      </div>\n    </div>`;\n  }\n\n  private _handleCardClick(e: any) {\n    const event = new CustomEvent('on-notification-click', {\n      detail: e.detail.origEvent,\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-notification': Notification;\n  }\n}\n"],"names":[],"sourceRoot":""}