{"version":3,"file":"7759.2b85a3f7.iframe.bundle.js","mappings":";;;AAqFA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;;AAIA;;ACzDA;AACA;AACA;AACA;;;;AAMA;;AAEA;AACA;AACA;;;;AAMA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/overflowMenu/overflowMenu.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/overflowMenu/overflowMenuItem.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  queryAssignedElements,\n  query,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport SCSS from './overflowMenu.scss';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport overflowIcon from '@carbon/icons/es/overflow-menu--horizontal/16';\n\n/**\n * Overflow Menu.\n * @slot unnamed - Slot for overflow menu items.\n * @fires on-toggle - Capture the open/close event and emits the new state.\n */\n@customElement('kyn-overflow-menu')\nexport class OverflowMenu extends LitElement {\n  static override styles = SCSS;\n\n  /** Menu open state. */\n  @property({ type: Boolean })\n  open = false;\n\n  /** Anchors the menu to the right of the button. */\n  @property({ type: Boolean })\n  anchorRight = false;\n\n  /** 3 dots vertical orientation. */\n  @property({ type: Boolean })\n  verticalDots = false;\n\n  /** Use fixed instead of absolute position. Useful when placed within elements with overflow scroll. */\n  @property({ type: Boolean })\n  fixed = false;\n\n  /** Button assistive text.. */\n  @property({ type: String })\n  assistiveText = 'Toggle Menu';\n\n  /** Queries for slotted menu items.\n   * @internal\n   */\n  @queryAssignedElements({ selector: 'kyn-overflow-menu-item' })\n  menuItems!: any;\n\n  @query('.btn')\n  _btnEl!: any;\n\n  @query('.menu')\n  _menuEl!: any;\n\n  /**\n   * A generated unique id\n   * @ignore\n   */\n  @state() private _id = crypto.randomUUID();\n\n  /**\n   * Open drawer upwards.\n   * @ignore\n   */\n  @state()\n  _openUpwards = false;\n\n  override render() {\n    const buttonClasses = {\n      btn: true,\n      open: this.open,\n      vertical: this.verticalDots,\n    };\n\n    const menuClasses = {\n      menu: true,\n      open: this.open,\n      right: this.anchorRight,\n      fixed: this.fixed,\n      upwards: this._openUpwards,\n    };\n\n    return html`\n      <div class=\"overflow-menu\">\n        <button\n          class=${classMap(buttonClasses)}\n          @click=${this.toggleMenu}\n          aria-controls=${this._id}\n          aria-expanded=${this.open}\n          title=${this.assistiveText}\n          aria-label=${this.assistiveText}\n        >\n          <kd-icon .icon=${overflowIcon}></kd-icon>\n        </button>\n\n        <div id=${this._id} class=${classMap(menuClasses)}>\n          <slot @slotchange=${this.handleSlotChange}></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  private _emitToggleEvent() {\n    const event = new CustomEvent('on-toggle', {\n      detail: {\n        open: this.open,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private toggleMenu() {\n    this.open = !this.open;\n    this._emitToggleEvent();\n  }\n\n  private _positionMenu() {\n    if (this.open) {\n      if (this.fixed) {\n        const Top =\n          this._btnEl.getBoundingClientRect().top +\n          this._btnEl.getBoundingClientRect().height;\n        const MenuHeight = this.menuItems.length * 48;\n\n        console.log(this._openUpwards);\n\n        if (this._openUpwards) {\n          this._menuEl.style.top =\n            this._btnEl.getBoundingClientRect().top - MenuHeight - 18 + 'px';\n          this._menuEl.style.bottom = 'initial';\n        } else {\n          this._menuEl.style.top = Top + 'px';\n          this._menuEl.style.bottom = 'initial';\n        }\n      } else {\n        this._menuEl.style.top = 'initial';\n      }\n    }\n  }\n\n  private handleSlotChange() {\n    this.menuItems.forEach((item: any) => {\n      item.anchorRight = this.anchorRight;\n    });\n  }\n\n  override willUpdate(changedProps: any) {\n    if (changedProps.has('anchorRight')) {\n      this.menuItems.forEach((item: any) => {\n        item.anchorRight = this.anchorRight;\n      });\n    }\n\n    if (changedProps.has('open')) {\n      if (this.open) {\n        // open dropdown upwards if closer to bottom of viewport\n        if (\n          this._btnEl.getBoundingClientRect().top >\n          window.innerHeight * 0.6\n        ) {\n          this._openUpwards = true;\n        } else {\n          this._openUpwards = false;\n        }\n      }\n\n      this._positionMenu();\n    }\n  }\n\n  private handleClickOut(e: Event) {\n    if (!e.composedPath().includes(this)) {\n      this.open = false;\n      this._emitToggleEvent();\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('click', (e) => this.handleClickOut(e));\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('click', (e) => this.handleClickOut(e));\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-overflow-menu': OverflowMenu;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport SCSS from './overflowMenuItem.scss';\n\n/**\n * Overflow Menu.\n * @fires on-click - Captures the click event and emits the original event details.\n * @slot unnamed - Slot for item text.\n */\n@customElement('kyn-overflow-menu-item')\nexport class OverflowMenuItem extends LitElement {\n  static override styles = SCSS;\n\n  /** Makes the item a link. */\n  @property({ type: String })\n  href = '';\n\n  /** Adds destructive styles. */\n  @property({ type: Boolean })\n  destructive = false;\n\n  /** Item disabled state. */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /**\n   * Menu anchorRight state, inherited from the parent.\n   * @internal\n   */\n  @state()\n  anchorRight = false;\n\n  override render() {\n    const classes = {\n      'overflow-menu-item': true,\n      destructive: this.destructive,\n      right: this.anchorRight,\n    };\n\n    if (this.href !== '') {\n      return html`\n        <a\n          class=${classMap(classes)}\n          href=${this.href}\n          ?disabled=${this.disabled}\n          @click=${(e: Event) => this.handleClick(e)}\n        >\n          <slot></slot>\n        </a>\n      `;\n    } else {\n      return html`\n        <button\n          class=${classMap(classes)}\n          ?disabled=${this.disabled}\n          @click=${(e: Event) => this.handleClick(e)}\n        >\n          <slot></slot>\n        </button>\n      `;\n    }\n  }\n\n  private handleClick(e: Event) {\n    const event = new CustomEvent('on-click', {\n      detail: { origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-overflow-menu-item': OverflowMenuItem;\n  }\n}\n"],"names":[],"sourceRoot":""}