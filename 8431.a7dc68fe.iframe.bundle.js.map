{"version":3,"file":"8431.a7dc68fe.iframe.bundle.js","mappings":";;AAwDA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;;;AAIA;;;;AAKA;;ACmBA;AACA;AACA;;AAEA;;;;AAIA;;;;AAIA;;AAGA;;AAEA;;;;AAKA;AACA;;AAIA;AAEA;AACA;AACA;;AAEA;;AAGA;;AAEA;;;AAIA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/localNav/localNav.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/localNav/localNavLink.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport LocalNavScss from './localNav.scss';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\n\nimport arrowIcon from '@carbon/icons/es/chevron--down/16';\n\n/**\n * The global Side Navigation component.\n * @slot unnamed - The default slot, for local nav links.\n * @fires on-toggle - Captures the click event and emits the open state and original event details.\n */\n@customElement('kyn-local-nav')\nexport class LocalNav extends LitElement {\n  static override styles = LocalNavScss;\n\n  /** Menu toggle button assistive text. */\n  @property({ type: Object })\n  textStrings = {\n    toggleMenu: 'Toggle Menu',\n    collapse: 'Collapse',\n  };\n\n  /** Local nav expanded state.\n   * @internal\n   */\n  @state()\n  _expanded = false;\n\n  /** Active Link text.\n   * @internal\n   */\n  @state()\n  _activeLinkText!: string;\n\n  /** Queries top-level slotted links.\n   * @internal\n   */\n  @queryAssignedElements({ selector: 'kyn-local-nav-link' })\n  _navLinks!: any;\n\n  /** Timeout function to delay modal close.\n   * @internal\n   */\n  @state()\n  timer: any;\n\n  override render() {\n    return html`\n      <nav\n        class=${classMap({ 'nav--expanded': this._expanded })}\n        @pointerleave=${(e: PointerEvent) => this.handlePointerLeave(e)}\n        @pointerenter=${(e: PointerEvent) => this.handlePointerEnter(e)}\n      >\n        <button\n          class=\"mobile-toggle\"\n          title=${this.textStrings.toggleMenu}\n          aria-label=${this.textStrings.toggleMenu}\n          @click=${(e: Event) => this._handleNavToggle(e)}\n        >\n          ${this._expanded ? this.textStrings.collapse : this._activeLinkText}\n          <kd-icon .icon=${arrowIcon}></kd-icon>\n        </button>\n\n        <div class=\"links\">\n          <slot @slotchange=${this.handleSlotChange}></slot>\n        </div>\n      </nav>\n      <div class=\"overlay\"></div>\n    `;\n  }\n\n  private _handleNavToggle(e: Event) {\n    this._expanded = !this._expanded;\n\n    const event = new CustomEvent('on-toggle', {\n      detail: { open: this._expanded, pinned: this._expanded, origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private handlePointerEnter(e: PointerEvent) {\n    if (e.pointerType === 'mouse') {\n      clearTimeout(this.timer);\n      this._expanded = true;\n    }\n  }\n\n  private handlePointerLeave(e: PointerEvent) {\n    if (e.pointerType === 'mouse' && document.activeElement !== this) {\n      this.timer = setTimeout(() => {\n        this._expanded = false;\n        clearTimeout(this.timer);\n      }, 100);\n    }\n  }\n\n  private _updateChildren() {\n    this._navLinks.forEach((link: any) => {\n      link._navExpanded = this._expanded;\n    });\n  }\n\n  private handleSlotChange() {\n    this._updateChildren();\n    this._setActiveLinkText();\n    this.requestUpdate();\n  }\n\n  private _setActiveLinkText() {\n    const Link: any = this.querySelector('kyn-local-nav-link[active]');\n    let text = '';\n\n    if (Link?.shadowRoot?.querySelector('.text slot')) {\n      const nodes = Link.shadowRoot.querySelector('.text slot')?.assignedNodes({\n        flatten: true,\n      });\n\n      for (let i = 0; i < nodes.length; i++) {\n        text += nodes[i].textContent.trim();\n      }\n    }\n\n    this._activeLinkText = text;\n  }\n\n  override willUpdate(changedProps: any) {\n    if (changedProps.has('_expanded')) {\n      this._updateChildren();\n    }\n  }\n\n  private _handleClickOut(e: Event) {\n    if (!e.composedPath().includes(this)) {\n      this._expanded = false;\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('click', (e) => this._handleClickOut(e));\n    this.addEventListener('on-click', () => this._setActiveLinkText());\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('click', (e) => this._handleClickOut(e));\n    this.removeEventListener('on-click', () => this._setActiveLinkText());\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-local-nav': LocalNav;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport LocalNavLinkScss from './localNavLink.scss';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\n\nimport arrowIcon from '@carbon/icons/es/chevron--right/16';\nimport backIcon from '@carbon/icons/es/arrow--left/16';\n\n/**\n * Link component for use in the global Side Navigation component.\n * @fires on-click - Captures the click event and emits the original event, level, and if default was prevented.\n * @slot unnamed - The default slot, for the link text.\n * @slot icon - Slot for an icon. Use 16px size.\n * @slot links - Slot for the next level of links, supports three levels.\n */\n@customElement('kyn-local-nav-link')\nexport class LocalNavLink extends LitElement {\n  static override styles = LocalNavLinkScss;\n\n  /** Link url. */\n  @property({ type: String })\n  href = '';\n\n  /** Expanded state. */\n  @state()\n  _expanded = false;\n\n  /** Active state. */\n  @property({ type: Boolean, reflect: true })\n  active = false;\n\n  /** Disabled state. */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /** Text for mobile \"Back\" button. */\n  @property({ type: String })\n  backText = 'Back';\n\n  /** Link level, supports three levels.\n   * @ignore\n   */\n  @state()\n  _level = 1;\n\n  /** The local nav expanded state.\n   * @internal\n   */\n  @state()\n  _navExpanded = false;\n\n  /** The slotted text.\n   * @internal\n   */\n  @state()\n  _text = '';\n\n  /**\n   * Queries slotted links.\n   * @ignore\n   */\n  @queryAssignedElements({ slot: 'links', selector: 'kyn-local-nav-link' })\n  navLinks!: Array<any>;\n\n  /** Timeout function to delay modal close.\n   * @internal\n   */\n  @state()\n  timer: any;\n\n  /** Menu positioning\n   * @internal\n   */\n  @state()\n  menuPosition: any = {};\n\n  override render() {\n    const classes = {\n      'level--1': this._level == 1,\n      'level--2': this._level == 2,\n      'level--3': this._level == 3,\n      'nav-expanded': this._navExpanded,\n      'link-expanded': this._expanded,\n      'link-active': this.active,\n      'link-disabled': this.disabled,\n    };\n\n    return html`\n      <div\n        class=${classMap(classes)}\n        @pointerleave=${(e: PointerEvent) => this.handlePointerLeave(e)}\n        @pointerenter=${(e: PointerEvent) => this.handlePointerEnter(e)}\n      >\n        <a href=${this.href} @click=${(e: Event) => this.handleClick(e)}>\n          <slot name=\"icon\"></slot>\n          <span class=\"text\">\n            <slot\n              @slotchange=${(e: Event) => this._handleTextSlotChange(e)}\n            ></slot>\n          </span>\n\n          ${this.navLinks.length\n            ? html`\n                <span class=\"arrow-icon\">\n                  <kd-icon .icon=${arrowIcon}></kd-icon>\n                </span>\n              `\n            : null}\n        </a>\n\n        <div\n          class=\"sub-menu ${this.navLinks.length ? 'has-links' : ''}\"\n          style=${this.navLinks.length\n            ? `top: ${this.menuPosition.top}px; left: ${this.menuPosition.left}px;`\n            : ''}\n        >\n          ${this.navLinks.length\n            ? html`\n                <button class=\"go-back\" @click=${() => this._handleBack()}>\n                  <kd-icon .icon=${backIcon}></kd-icon>\n                  ${this.backText}\n                </button>\n              `\n            : null}\n\n          <div class=\"category\">${this._text}</div>\n\n          <slot name=\"links\" @slotchange=${this._handleLinksSlotChange}></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  override firstUpdated() {\n    this.determineLevel();\n  }\n\n  override willUpdate(changedProps: any) {\n    if (changedProps.has('_navExpanded')) {\n      this.updateChildren();\n    }\n\n    if (\n      changedProps.has('_expanded') &&\n      this._expanded &&\n      this.navLinks.length\n    ) {\n      this._positionMenu();\n    }\n  }\n\n  private _handleTextSlotChange(e: Event) {\n    const Slot: any = e.target;\n    let text = '';\n\n    const nodes = Slot.assignedNodes({\n      flatten: true,\n    });\n\n    for (let i = 0; i < nodes.length; i++) {\n      text += nodes[i].textContent.trim();\n    }\n\n    this._text = text;\n\n    this.requestUpdate();\n  }\n\n  private _handleLinksSlotChange() {\n    this.updateChildren();\n    this.requestUpdate();\n  }\n\n  private updateChildren() {\n    this.navLinks.forEach((link: any) => {\n      link._navExpanded = this._navExpanded;\n    });\n  }\n\n  private determineLevel() {\n    const parentNode = this.shadowRoot!.host.parentNode;\n    if (parentNode!.nodeName === 'KYN-LOCAL-NAV') {\n      this._level = 1;\n    } else if (parentNode!.parentNode!.nodeName === 'KYN-LOCAL-NAV') {\n      this._level = 2;\n    } else {\n      this._level = 3;\n    }\n  }\n\n  private handlePointerEnter(e: PointerEvent) {\n    if (e.pointerType === 'mouse' && this.navLinks.length) {\n      clearTimeout(this.timer);\n      this._expanded = true;\n    }\n  }\n\n  private handlePointerLeave(e: PointerEvent) {\n    if (\n      e.pointerType === 'mouse' &&\n      document.activeElement !== this &&\n      this.navLinks.length\n    ) {\n      this.timer = setTimeout(() => {\n        this._expanded = false;\n        clearTimeout(this.timer);\n      }, 100);\n    }\n  }\n\n  private _positionMenu() {\n    // determine submenu positioning\n    const LinkBounds: any = this.getBoundingClientRect();\n    const MenuBounds: any = this.shadowRoot\n      ?.querySelector('.sub-menu')\n      ?.getBoundingClientRect();\n    const Padding = 8;\n    const HeaderHeight = 56;\n\n    const LinkHalf = LinkBounds.top + LinkBounds.height / 2;\n    const MenuHalf = MenuBounds.height / 2;\n\n    const Top =\n      LinkHalf + MenuHalf > window.innerHeight\n        ? LinkHalf - MenuHalf - (LinkHalf + MenuHalf - window.innerHeight)\n        : LinkHalf - MenuHalf;\n    const Left = LinkBounds.right + Padding;\n\n    this.menuPosition = {\n      top: Top < HeaderHeight ? HeaderHeight : Top,\n      left: Left < 320 ? 320 : Left,\n    };\n  }\n\n  private _handleBack() {\n    this._expanded = false;\n  }\n\n  private handleClick(e: Event) {\n    let preventDefault = false;\n\n    if (this.disabled) {\n      preventDefault = true;\n    }\n\n    if (this.navLinks.length) {\n      preventDefault = true;\n      this._expanded = !this._expanded;\n    }\n\n    if (preventDefault) {\n      e.preventDefault();\n    }\n\n    this.requestUpdate();\n\n    const event = new CustomEvent('on-click', {\n      composed: true,\n      bubbles: true,\n      detail: {\n        origEvent: e,\n        level: this._level,\n        defaultPrevented: preventDefault,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private _handleClickOut(e: Event) {\n    if (!e.composedPath().includes(this)) {\n      this._expanded = false;\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('click', (e) => this._handleClickOut(e));\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('click', (e) => this._handleClickOut(e));\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-local-nav-link': LocalNavLink;\n  }\n}\n"],"names":[],"sourceRoot":""}