{"version":3,"file":"7142.bf95bae1.iframe.bundle.js","mappings":";AAuEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;;;;AAIA;;;AAIA;ACxDA;;;;;AAKA;;AAEA;;;;;;;AASA;AAEA;;ACsDA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAMA;AACA;;AAEA;AACA;AACA;;;AAGA;;;AAIA;AACA;;AAEA;;AAEA;;AAGA;;;AAIA;;ACnIA;;;AAIA;ACFA;;;;;AAKA;;AAEA;;;;;;;AAQA;;ACqDA;AACA;AACA;;AAEA;;;AAIA;AACA;AACA;AACA;AACA;;;;AAIA;;AAGA;;;;;;;AAQA;;;AAGA;;;AAIA;AACA;AACA;AACA;;;;AAIA;;AAGA;;;;;;;AAQA;;;;;AAKA;AACA;;AAGA;;;;AAKA;AACA;AACA;;;;;;AAOA;;;;;AC5HA;AAGA;AAGA;;AAGA;AACA;;;AAGA;;;AAIA;;;;AAKA;AACA;;AAEA;;;AAGA;;AAIA;;ACfA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;;;;;AAQA;;AC5DA;AACA;AACA;AACA;;;;AAKA;;;;ACFA;;;;;;;;;;;;;AAaA;;;AAKA;AACA;;;AAIA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/header.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerNav.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerLink.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerCategory.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerFlyouts.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerFlyout.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerUserProfile.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerPanel.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerPanelLink.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/global/header/headerNotificationPanel.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html.js';\nimport HeaderScss from './header.scss';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport logo from '@kyndryl-design-system/shidoka-foundation/assets/svg/kyndryl-logo.svg';\n\n/**\n * The global Header component.\n * @fires on-menu-toggle - Captures the menu toggle click event and emits the menu open state in the detail.\n * @fires on-root-link-click - Captures the logo link click event and emits the original event details.\n * @slot unnamed - The default slot for all empty space right of the logo/title.\n * @slot logo - Slot for the logo, will overwrite the default logo.\n * @slot left - Slot left of the logo, intended for the header nav.\n */\n@customElement('kyn-header')\nexport class Header extends LitElement {\n  static override styles = HeaderScss;\n\n  /** URL for the header logo link. Should target the application home page. */\n  @property({ type: String })\n  rootUrl = '/';\n\n  /** App title text next to logo.  Hidden on smaller screens. */\n  @property({ type: String })\n  appTitle = '';\n\n  /** Queries for slotted header-nav.\n   * @internal\n   */\n  @queryAssignedElements({ selector: 'kyn-header-nav' })\n  navEls!: any;\n\n  /** Queries for all slotted elements.\n   * @internal\n   */\n  @queryAssignedElements()\n  assignedElements!: any;\n\n  /** Queries for elements in left slot.\n   * @internal\n   */\n  @queryAssignedElements({ slot: 'left' })\n  leftEls!: any;\n\n  /** header-nav open state\n   * @internal\n   */\n  @state()\n  _navOpen = false;\n\n  /** header-flyouts open state\n   * @internal\n   */\n  @state()\n  _flyoutsOpen = false;\n\n  override render() {\n    const classes = {\n      header: true,\n      'left-slotted': this.leftEls.length,\n      'child-open': this._navOpen || this._flyoutsOpen,\n    };\n\n    return html`\n      <header class=\"${classMap(classes)}\">\n        <slot name=\"left\" @slotchange=${this.handleSlotChange}></slot>\n        <a\n          href=\"${this.rootUrl}\"\n          class=\"logo-link interactive\"\n          @click=\"${(e: Event) => this.handleRootLinkClick(e)}\"\n        >\n          <slot name=\"logo\" @slotchange=${this.handleSlotChange}>\n            ${unsafeHTML(logo)}\n          </slot>\n\n          <span class=\"title\">${this.appTitle}</span>\n        </a>\n\n        <div class=\"header__right\">\n          <slot @slotchange=${this.handleSlotChange}></slot>\n        </div>\n      </header>\n    `;\n  }\n\n  private handleSlotChange() {\n    this.requestUpdate();\n  }\n\n  private handleRootLinkClick(e: Event) {\n    const event = new CustomEvent('on-root-link-click', {\n      detail: { origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private _handleNavToggle(e: any) {\n    this._navOpen = e.detail.open;\n  }\n\n  private _handleFlyoutsToggle(e: any) {\n    this._flyoutsOpen = e.detail.open;\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('on-nav-toggle', (e: Event) =>\n      this._handleNavToggle(e)\n    );\n    document.addEventListener('on-flyouts-toggle', (e: Event) =>\n      this._handleFlyoutsToggle(e)\n    );\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('on-nav-toggle', (e: Event) =>\n      this._handleNavToggle(e)\n    );\n    document.removeEventListener('on-flyouts-toggle', (e: Event) =>\n      this._handleFlyoutsToggle(e)\n    );\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header': Header;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport HeaderNavScss from './headerNav.scss';\n\nimport menuIcon from '@carbon/icons/es/menu/24';\nimport closeIcon from '@carbon/icons/es/close/24';\n\n/**\n * Container for header navigation links.\n * @slot unnamed - This element has a slot.\n */\n@customElement('kyn-header-nav')\nexport class HeaderNav extends LitElement {\n  static override styles = HeaderNavScss;\n\n  /** Small screen header nav visibility.\n   * @ignore\n   */\n  @state()\n  menuOpen = false;\n\n  /** Force correct slot */\n  @property({ type: String, reflect: true })\n  override slot = 'left';\n\n  override render() {\n    const classes = {\n      'header-nav': true,\n      menu: true,\n      open: this.menuOpen,\n    };\n\n    return html`\n      <div class=${classMap(classes)}>\n        <button\n          class=\"btn interactive\"\n          aria-label=\"Toggle Menu\"\n          title=\"Toggle Menu\"\n          @click=${() => this._toggleMenuOpen()}\n        >\n          ${this.menuOpen\n            ? html` <kd-icon .icon=${closeIcon}></kd-icon> `\n            : html` <kd-icon .icon=${menuIcon}></kd-icon> `}\n        </button>\n\n        <div class=\"menu__content left\">\n          <slot></slot>\n        </div>\n      </div>\n      <div class=\"overlay\" @click=${this._handleOverlayClick}></div>\n    `;\n  }\n\n  private _toggleMenuOpen() {\n    this.menuOpen = !this.menuOpen;\n  }\n\n  private _handleClickOut(e: Event) {\n    if (!e.composedPath().includes(this)) {\n      this.menuOpen = false;\n    }\n  }\n\n  private _handleOverlayClick() {\n    this.menuOpen = false;\n  }\n\n  override willUpdate(changedProps: any) {\n    if (changedProps.has('menuOpen')) {\n      const event = new CustomEvent('on-nav-toggle', {\n        composed: true,\n        bubbles: true,\n        detail: { open: this.menuOpen },\n      });\n      this.dispatchEvent(event);\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('click', (e) => this._handleClickOut(e));\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('click', (e) => this._handleClickOut(e));\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-nav': HeaderNav;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { debounce } from '../../../common/helpers/helpers';\nimport HeaderLinkScss from './headerLink.scss';\nimport '../../reusable/textInput';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport arrowIcon from '@carbon/icons/es/chevron--right/16';\nimport backIcon from '@carbon/icons/es/arrow--left/16';\n\n/**\n * Component for navigation links within the Header.\n * @fires on-click - Captures the click event and emits the original event details.\n * @slot unnamed - Slot for link text/content.\n * @slot links - Slot for sublinks (up to two levels).\n */\n@customElement('kyn-header-link')\nexport class HeaderLink extends LitElement {\n  static override styles = HeaderLinkScss;\n\n  /** Link open state. */\n  @property({ type: Boolean })\n  open = false;\n\n  /** Link url. */\n  @property({ type: String })\n  href = '';\n\n  /** Defines a target attribute for where to load the URL. Possible options include \"_self\" (default), \"_blank\", \"_parent\", \"_top\" */\n  @property({ type: String })\n  target = '_self' as const;\n\n  /** Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship */\n  @property({ type: String })\n  rel = '';\n\n  /** Link active state, for example when URL path matches link href. */\n  @property({ type: Boolean })\n  isActive = false;\n\n  /** Link level, supports two levels.\n   * @ignore\n   */\n  @state()\n  level = 1;\n\n  /** DEPRECATED. Adds a 1px shadow to the bottom of the link. */\n  @property({ type: Boolean })\n  divider = false;\n\n  /** Label for sub-menu link search input, which is visible with > 5 sub-links. */\n  @property({ type: String })\n  searchLabel = 'Search';\n\n  /** Text for mobile \"Back\" button. */\n  @property({ type: String })\n  backText = 'Back';\n\n  /**\n   * Queries any slotted HTML elements.\n   * @ignore\n   */\n  @queryAssignedElements({ slot: 'links' })\n  slottedEls!: Array<HTMLElement>;\n\n  /** Timeout function to delay modal close.\n   * @internal\n   */\n  @state()\n  timer: any;\n\n  /** Menu positioning\n   * @internal\n   */\n  @state()\n  menuPosition: any = {};\n\n  override render() {\n    const classes = {\n      menu: this.slottedEls.length,\n      'level--1': this.level == 1,\n      'level--2': this.level == 2,\n      divider: this.divider,\n      open: this.open,\n    };\n\n    const linkClasses = {\n      'nav-link': true,\n      active: this.isActive,\n      interactive: this.level == 1,\n    };\n\n    const menuClasses = {\n      menu__content: true,\n      slotted: this.slottedEls.length,\n    };\n\n    const Links = this.querySelectorAll('kyn-header-link');\n\n    return html`\n      <div\n        class=\"${classMap(classes)}\"\n        @pointerleave=${(e: PointerEvent) => this.handlePointerLeave(e)}\n        @pointerenter=${(e: PointerEvent) => this.handlePointerEnter(e)}\n      >\n        <a\n          target=${this.target}\n          rel=${this.rel}\n          href=${this.href}\n          class=${classMap(linkClasses)}\n          @click=${(e: Event) => this.handleClick(e)}\n          @pointerenter=${(e: PointerEvent) => this.handlePointerEnter(e)}\n        >\n          <slot></slot>\n\n          ${this.slottedEls.length\n            ? html` <kd-icon class=\"arrow\" .icon=${arrowIcon}></kd-icon> `\n            : null}\n        </a>\n\n        <div\n          class=${classMap(menuClasses)}\n          style=${`top: ${this.menuPosition.top}px; left: ${this.menuPosition.left}px;`}\n        >\n          <button class=\"go-back\" @click=${() => this._handleBack()}>\n            <kd-icon .icon=${backIcon}></kd-icon>\n            ${this.backText}\n          </button>\n\n          ${Links.length > 5\n            ? html`\n                <kyn-text-input\n                  hideLabel\n                  placeholder=${this.searchLabel}\n                  @on-input=${(e: Event) => this._handleSearch(e)}\n                >\n                  ${this.searchLabel}\n                </kyn-text-input>\n              `\n            : null}\n\n          <slot name=\"links\" @slotchange=${this._handleLinksSlotChange}></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleSearch(e: any) {\n    const SearchTerm = e.detail.value.toLowerCase();\n    const Links: any = this.querySelectorAll('kyn-header-link');\n\n    Links.forEach((link: any) => {\n      // get link text\n      const nodes: any = link.shadowRoot?.querySelector('slot')?.assignedNodes({\n        flatten: true,\n      });\n      let linkText = '';\n      for (let i = 0; i < nodes.length; i++) {\n        linkText += nodes[i].textContent.trim();\n      }\n\n      if (linkText.toLowerCase().includes(SearchTerm)) {\n        link.style.display = 'block';\n      } else {\n        link.style.display = 'none';\n      }\n    });\n\n    this._positionMenu();\n  }\n\n  private _handleBack() {\n    this.open = false;\n  }\n\n  private _handleLinksSlotChange() {\n    this.requestUpdate();\n  }\n\n  private handlePointerEnter(e: PointerEvent) {\n    if (e.pointerType === 'mouse') {\n      clearTimeout(this.timer);\n      this.open = true;\n    }\n  }\n\n  private handlePointerLeave(e: PointerEvent) {\n    if (e.pointerType === 'mouse' && document.activeElement !== this) {\n      this.timer = setTimeout(() => {\n        this.open = false;\n        clearTimeout(this.timer);\n      }, 100);\n    }\n  }\n\n  private handleClick(e: Event) {\n    let preventDefault = false;\n\n    if (this.slottedEls.length) {\n      preventDefault = true;\n      e.preventDefault();\n      this.open = !this.open;\n    }\n\n    const event = new CustomEvent('on-click', {\n      detail: { origEvent: e, defaultPrevented: preventDefault },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private handleClickOut(e: Event) {\n    if (!e.composedPath().includes(this)) {\n      this.open = false;\n    }\n  }\n\n  private determineLevel() {\n    const ParentNode: any = this.shadowRoot?.host.parentNode;\n\n    if (\n      ParentNode.nodeName === 'KYN-HEADER-LINK' ||\n      ParentNode.slot === 'links'\n    ) {\n      this.level = 2;\n    } else {\n      if (\n        window.innerWidth < 672 &&\n        ParentNode.nodeName === 'KYN-HEADER-FLYOUT'\n      ) {\n        this.level = 2;\n      } else {\n        this.level = 1;\n      }\n    }\n  }\n\n  private _positionMenu() {\n    // determine submenu positioning\n    const LinkBounds: any = this.getBoundingClientRect();\n    const MenuBounds: any = this.shadowRoot\n      ?.querySelector('.menu__content')\n      ?.getBoundingClientRect();\n    const Padding = 8;\n    const HeaderHeight = 56;\n\n    const LinkHalf = LinkBounds.top + LinkBounds.height / 2;\n    const MenuHalf = MenuBounds.height / 2;\n\n    const Top =\n      LinkHalf + MenuHalf > window.innerHeight\n        ? LinkHalf - MenuHalf - (LinkHalf + MenuHalf - window.innerHeight)\n        : LinkHalf - MenuHalf;\n\n    this.menuPosition = {\n      top: Top < HeaderHeight ? HeaderHeight : Top,\n      left: LinkBounds.right + Padding,\n    };\n  }\n\n  override firstUpdated() {\n    this.determineLevel();\n  }\n\n  override willUpdate(changedProps: any) {\n    if (changedProps.has('open') && this.open) {\n      this._positionMenu();\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('click', (e) => this.handleClickOut(e));\n\n    window?.addEventListener(\n      'resize',\n      debounce(() => {\n        this.determineLevel();\n      })\n    );\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('click', (e) => this.handleClickOut(e));\n\n    window?.removeEventListener(\n      'resize',\n      debounce(() => {\n        this.determineLevel();\n      })\n    );\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-nav-link': HeaderLink;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport HeaderCategoryScss from './headerCategory.scss';\n\n/**\n * Header link category\n * @slot unnamed - Slot for links.\n */\n@customElement('kyn-header-category')\nexport class HeaderCategory extends LitElement {\n  static override styles = HeaderCategoryScss;\n\n  /** Link url. */\n  @property({ type: String })\n  heading = '';\n\n  override render() {\n    return html`\n      <div class=\"category\">\n        <div class=\"heading\">${this.heading}</div>\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-category': HeaderCategory;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport HeaderFlyoutsScss from './headerFlyouts.scss';\n\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport overflowIcon from '@carbon/icons/es/overflow-menu--vertical/20';\n\n/**\n * Container for header-flyout components.\n * @slot unnamed - Slot for header-flyout components.\n */\n@customElement('kyn-header-flyouts')\nexport class HeaderFlyouts extends LitElement {\n  static override styles = HeaderFlyoutsScss;\n\n  /* Menu open state (small breakpoint). */\n  @property({ type: Boolean })\n  open = false;\n\n  override render() {\n    return html`\n      <div class=\"header-flyouts menu ${this.open ? 'open' : ''}\">\n        <button\n          class=\"btn interactive\"\n          aria-label=\"Toggle Menu\"\n          title=\"Toggle Menu\"\n          @click=${() => this._toggleOpen()}\n        >\n          <kd-icon .icon=${overflowIcon}></kd-icon>\n        </button>\n\n        <div class=\"menu__content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  private _toggleOpen() {\n    this.open = !this.open;\n  }\n\n  private _handleClickOut(e: Event) {\n    if (!e.composedPath().includes(this)) {\n      this.open = false;\n    }\n  }\n\n  override willUpdate(changedProps: any) {\n    if (changedProps.has('open')) {\n      const event = new CustomEvent('on-flyouts-toggle', {\n        composed: true,\n        bubbles: true,\n        detail: { open: this.open },\n      });\n      this.dispatchEvent(event);\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('click', (e) => this._handleClickOut(e));\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('click', (e) => this._handleClickOut(e));\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-flyouts': HeaderFlyouts;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport HeaderFlyoutScss from './headerFlyout.scss';\nimport chevronIcon from '@carbon/icons/es/chevron--right/16';\nimport backIcon from '@carbon/icons/es/arrow--left/16';\n\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\n\n/**\n * Component for header flyout items.\n * @slot unnamed - Slot for flyout menu content.\n * @slot button - Slot for button/toggle content.\n */\n@customElement('kyn-header-flyout')\nexport class HeaderFlyout extends LitElement {\n  static override styles = HeaderFlyoutScss;\n\n  /** Flyout open state. */\n  @property({ type: Boolean })\n  open = false;\n\n  /** Anchor flyout menu to the left edge of the button instead of the right edge. */\n  @property({ type: Boolean })\n  anchorLeft = false;\n\n  /** Hides the arrow. */\n  @property({ type: Boolean })\n  hideArrow = false;\n\n  /** Menu & button label. */\n  @property({ type: String })\n  label = '';\n\n  /** Hide the label at the top of the flyout menu. */\n  @property({ type: Boolean })\n  hideMenuLabel = false;\n\n  /** Hide the label in the mobile button. */\n  @property({ type: Boolean })\n  hideButtonLabel = false;\n\n  /**\n   * DEPRECATED. Use `label` instead.\n   * Button assistive text, title + aria-label.\n   */\n  @property({ type: String })\n  assistiveText = '';\n\n  /** Turns the button into a link. */\n  @property({ type: String })\n  href = '';\n\n  /** Text for mobile \"Back\" button. */\n  @property({ type: String })\n  backText = 'Back';\n\n  /**\n   * Queries any slotted HTML elements.\n   * @ignore\n   */\n  @queryAssignedElements()\n  slottedElements!: Array<HTMLElement>;\n\n  /** Timeout function to delay modal close.\n   * @internal\n   */\n  @state()\n  timer: any;\n\n  override render() {\n    const classes = {\n      menu: true,\n      open: this.open,\n    };\n\n    const contentClasses = {\n      menu__content: true,\n      'menu__content--left': this.anchorLeft,\n      slotted: this.slottedElements.length,\n    };\n\n    return html`\n      <div\n        class=\"${classMap(classes)}\"\n        @pointerleave=${(e: PointerEvent) => this.handlePointerLeave(e)}\n        @pointerenter=${(e: PointerEvent) => this.handlePointerEnter(e)}\n      >\n        ${this.href !== ''\n          ? html`\n              <a\n                class=\"btn interactive\"\n                href=${this.href}\n                title=${this.label || this.assistiveText}\n                aria-label=${this.label || this.assistiveText}\n                @click=${this.handleClick}\n                @pointerenter=${(e: PointerEvent) => this.handlePointerEnter(e)}\n              >\n                <slot name=\"button\"></slot>\n\n                ${!this.hideButtonLabel\n                  ? html`\n                      <span class=\"label\">\n                        ${this.label || this.assistiveText}\n                      </span>\n                    `\n                  : null}\n\n                <kd-icon\n                  slot=\"button\"\n                  class=\"arrow\"\n                  .icon=\"${chevronIcon}\"\n                ></kd-icon>\n              </a>\n            `\n          : html`\n              <button\n                class=\"btn interactive\"\n                title=${this.label || this.assistiveText}\n                aria-label=${this.label || this.assistiveText}\n                @click=${this.handleClick}\n                @pointerenter=${(e: PointerEvent) => this.handlePointerEnter(e)}\n              >\n                <slot name=\"button\"></slot>\n\n                ${!this.hideButtonLabel\n                  ? html`\n                      <span class=\"label\">\n                        ${this.label || this.assistiveText}\n                      </span>\n                    `\n                  : null}\n\n                <kd-icon\n                  slot=\"button\"\n                  class=\"arrow\"\n                  .icon=\"${chevronIcon}\"\n                ></kd-icon>\n              </button>\n            `}\n\n        <div class=${classMap(contentClasses)}>\n          ${!this.hideMenuLabel\n            ? html`\n                <div class=\"menu-label\">\n                  ${this.label || this.assistiveText}\n                </div>\n              `\n            : null}\n\n          <button class=\"go-back\" @click=${() => this._handleBack()}>\n            <kd-icon .icon=${backIcon}></kd-icon>\n            ${this.backText}\n          </button>\n          <slot></slot>\n        </div>\n      </div>\n      <div class=\"overlay\"></div>\n    `;\n  }\n\n  private _handleBack() {\n    this.open = false;\n  }\n\n  private handlePointerEnter(e: PointerEvent) {\n    if (e.pointerType === 'mouse') {\n      clearTimeout(this.timer);\n      this.open = true;\n    }\n  }\n\n  private handlePointerLeave(e: PointerEvent) {\n    if (e.pointerType === 'mouse' && e.relatedTarget !== null) {\n      this.timer = setTimeout(() => {\n        this.open = false;\n        clearTimeout(this.timer);\n      }, 100);\n    }\n  }\n\n  private handleClick() {\n    this.open = !this.open;\n  }\n\n  private handleClickOut(e: Event) {\n    if (!e.composedPath().includes(this)) {\n      this.open = false;\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('click', (e) => this.handleClickOut(e));\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('click', (e) => this.handleClickOut(e));\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-flyout': HeaderFlyout;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport HeaderUserProfileScss from './headerUserProfile.scss';\nimport '@kyndryl-design-system/shidoka-foundation/components/link';\n\n/**\n * Header user profile.\n * @fires on-profile-link-click - Captures the view profile link click event and emits the original event details.\n * @slot unnamed - Slot for the profile picture img.\n */\n@customElement('kyn-header-user-profile')\nexport class HeaderUserProfile extends LitElement {\n  static override styles = HeaderUserProfileScss;\n\n  /** The user's name. */\n  @property({ type: String })\n  name = '';\n\n  /** The user's job title, or subtext. */\n  @property({ type: String })\n  subtitle = '';\n\n  /** The user's email address. */\n  @property({ type: String })\n  email = '';\n\n  /** View profile link URL. */\n  @property({ type: String })\n  profileLink = '';\n\n  /** View Profile link text. */\n  @property({ type: String })\n  profileLinkText = 'View Profile';\n\n  override render() {\n    return html`\n      <div class=\"user-profile\">\n        <div class=\"picture\"><slot></slot></div>\n\n        <div class=\"info\">\n          ${this.name !== ''\n            ? html` <div class=\"name\">${this.name}</div>`\n            : null}\n          ${this.subtitle !== ''\n            ? html` <div class=\"subtitle\">${this.subtitle}</div>`\n            : null}\n          ${this.email !== ''\n            ? html`\n                <div class=\"email\">\n                  <kd-link standalone href=\"mailto:${this.email}\">\n                    ${this.email}\n                  </kd-link>\n                </div>\n              `\n            : null}\n        </div>\n\n        ${this.profileLink !== ''\n          ? html`\n              <div class=\"view-profile\">\n                <kd-link\n                  standalone\n                  href=${this.profileLink}\n                  @on-click=${(e: Event) => this._handleProfileClick(e)}\n                >\n                  ${this.profileLinkText}\n                </kd-link>\n              </div>\n            `\n          : null}\n      </div>\n    `;\n  }\n\n  private _handleProfileClick(e: any) {\n    const event = new CustomEvent('on-profile-link-click', {\n      detail: { origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-user-profile': HeaderUserProfile;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport HeaderPanelScss from './headerPanel.scss';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\n\nimport closeIcon from '@carbon/icons/es/close/24';\n\n/**\n * Header fly-out panel.\n * @slot unnamed - Slot for panel content.\n * @slot button - Slot for button icon.\n */\n@customElement('kyn-header-panel')\nexport class HeaderPanel extends LitElement {\n  static override styles = HeaderPanelScss;\n\n  /** Panel extends from right instead of left. */\n  @property({ type: Boolean })\n  right = false;\n\n  /** Panel open state. */\n  @property({ type: Boolean })\n  open = false;\n\n  /** Panel heading. */\n  @property({ type: String })\n  heading = '';\n\n  /** Open button assistive text. */\n  @property({ type: String })\n  openText = 'Open Panel';\n\n  /** Close button assistive text. */\n  @property({ type: String })\n  closeText = 'Close Panel';\n\n  /**\n   * A generated unique id\n   * @ignore\n   */\n  @state() private _id = crypto.randomUUID();\n\n  override render() {\n    const buttonClasses = {\n      interactive: true,\n      open: this.open,\n    };\n\n    const panelClasses = {\n      panel: true,\n      open: this.open,\n      right: this.right,\n    };\n\n    return html`\n      <button\n        class=\"${classMap(buttonClasses)}\"\n        title=${this.openText}\n        aria-label=${this.openText}\n        @click=${this.togglePanel}\n        aria-controls=${this._id}\n        aria-expanded=${this.open}\n      >\n        <slot name=\"button\"></slot>\n      </button>\n\n      <div id=${this._id} class=\"${classMap(panelClasses)}\" tabindex=\"-1\">\n        <div class=\"heading\">\n          <button\n            class=\"${classMap(buttonClasses)}\"\n            title=${this.closeText}\n            aria-label=${this.closeText}\n            @click=${this.togglePanel}\n            aria-controls=${this._id}\n            aria-expanded=${this.open}\n          >\n            <kd-icon .icon=${closeIcon}></kd-icon>\n          </button>\n\n          <div class=\"heading__text\">${this.heading}</div>\n        </div>\n\n        <div class=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  private togglePanel() {\n    this.open = !this.open;\n  }\n\n  private handleClickOut(e: Event) {\n    if (!e.composedPath().includes(this)) {\n      this.open = false;\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document.addEventListener('click', (e) => this.handleClickOut(e));\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('click', (e) => this.handleClickOut(e));\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-panel': HeaderPanel;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport HeaderPanelLinkScss from './headerPanelLink.scss';\n\n/**\n * Header fly-out panel link.\n * @fires on-click - Captures the click event and emits the original event details.\n * @slot unnamed - Slot for link text/content.\n */\n@customElement('kyn-header-panel-link')\nexport class HeaderPanelLink extends LitElement {\n  static override styles = HeaderPanelLinkScss;\n\n  /** Link url. */\n  @property({ type: String })\n  href = '';\n\n  /** Defines a target attribute for where to load the URL. Possible options include \"_self\" (default), \"_blank\", \"_parent\", \"_top\" */\n  @property({ type: String })\n  target = '_self' as const;\n\n  /** Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship */\n  @property({ type: String })\n  rel = '';\n\n  override render() {\n    return html`\n      <a\n        target=${this.target}\n        rel=${this.rel}\n        href=${this.href}\n        @click=${(e: Event) => this.handleClick(e)}\n      >\n        <slot></slot>\n      </a>\n    `;\n  }\n\n  private handleClick(e: Event) {\n    const event = new CustomEvent('on-click', {\n      detail: { origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-panel-link': HeaderPanelLink;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport '@kyndryl-design-system/shidoka-foundation/components/button';\n\nimport HeaderNotificationPanelScss from './headerNotificationPanel.scss';\n\n/**\n * Component for notification panel within the Header.\n * @slot menu-slot - Slot for panel menu\n * @slot unnamed - Slot for notification content.\n * @fires on-footer-btn-click - Emits the panel footer button event.\n */\n\n@customElement('kyn-header-notification-panel')\nexport class HeaderNotificationPanel extends LitElement {\n  static override styles = HeaderNotificationPanelScss;\n\n  /** Notification panel Title. */\n  @property({ type: String })\n  panelTitle = '';\n\n  /** Notification panel footer button text. */\n  @property({ type: String })\n  panelFooterBtnText = '';\n\n  /** Hide notification panel footer */\n  @property({ type: Boolean })\n  hidePanelFooter = false;\n\n  override render() {\n    return html` <div class=\"panel-wrapper\">\n      <header class=\"panel-header-wrapper\">\n        <div class=\"panel-header\">\n          <div class=\"panel-left\">\n            <h1 class=\"panel-header-text\">${this.panelTitle}</h1>\n          </div>\n          <div class=\"panel-left-slot\">\n            <slot name=\"menu-slot\"></slot>\n          </div>\n        </div>\n\n        <hr class=\"panel-divider\" />\n      </header>\n\n      <div class=\"panel-body\">\n        <slot></slot>\n      </div>\n      ${this.hidePanelFooter\n        ? null\n        : html` <div class=\"panel-footer\">\n            <kd-button\n              kind=\"tertiary\"\n              @click=${(e: Event) => this._handlefooterBtnEvent(e)}\n              >${this.panelFooterBtnText}</kd-button\n            >\n          </div>`}\n    </div>`;\n  }\n\n  // emit event on footer buton click\n  private _handlefooterBtnEvent(e: any) {\n    const event = new CustomEvent('on-footer-btn-click', {\n      detail: {\n        origEvent: e,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-notification-panel': HeaderNotificationPanel;\n  }\n}\n"],"names":[],"sourceRoot":""}