{"version":3,"file":"4772.5428c975.iframe.bundle.js","mappings":";;;AA4MA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;;;;AAOA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;AAEA;;;;AAKA;;AAEA;AACA;;AAEA;AAEA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;;AAQA;;;;AAIA;;;AAOA;AACA;AACA;AACA;;AAEA;;;;;AAMA;AACA;AACA;;AAEA;;AAEA;;;;AAKA;;;;;AAKA;;;;AAKA;;AAEA;;AAEA;AAEA;;;AAKA;;AAGA;;AAoBA;AACA;;AAGA;;AAGA;AAEA;AAGA;;AAGA;;AAEA;;;;;;;;AASA;;;AAIA;;;ACzUA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAGA;;AAKA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/dropdown/dropdown.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/dropdown/dropdownOption.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  query,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport DropdownScss from './dropdown.scss';\nimport './dropdownOption';\nimport '../tag';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport downIcon from '@carbon/icons/es/chevron--down/24';\nimport errorIcon from '@carbon/icons/es/warning--filled/24';\nimport clearIcon from '@carbon/icons/es/close/24';\nimport clearIcon16 from '@carbon/icons/es/close/16';\n\n/**\n * Dropdown, single select.\n * @fires on-change - Captures the input event and emits the selected value and original event details.\n * @fires on-search - Capture the search input event and emits the search text.\n * @slot unnamed - Slot for dropdown options.\n * @slot label - Slot for input label.\n */\n@customElement('kyn-dropdown')\nexport class Dropdown extends LitElement {\n  static override styles = DropdownScss;\n\n  /** @ignore */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Associate the component with forms.\n   * @ignore\n   */\n  static formAssociated = true;\n\n  /**\n   * Attached internals for form association.\n   * @ignore\n   */\n  @state()\n  internals = this.attachInternals();\n\n  /** Dropdown size/height. \"sm\", \"md\", or \"lg\". */\n  @property({ type: String })\n  size = 'md';\n\n  /** Dropdown inline style type. */\n  @property({ type: Boolean })\n  inline = false;\n\n  /** Optional text beneath the input. */\n  @property({ type: String })\n  caption = '';\n\n  /** Dropdown placeholder. */\n  @property({ type: String })\n  placeholder = '';\n\n  /** Dropdown name. */\n  @property({ type: String })\n  name = '';\n\n  /** Listbox/drawer open state. */\n  @property({ type: Boolean })\n  open = false;\n\n  /** Makes the dropdown searchable. */\n  @property({ type: Boolean })\n  searchable = false;\n\n  /** Enabled multi-select functionality. */\n  @property({ type: Boolean })\n  multiple = false;\n\n  /** Makes the dropdown required. */\n  @property({ type: Boolean })\n  required = false;\n\n  /** Dropdown disabled state. */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /** Dropdown invalid text. */\n  @property({ type: String })\n  invalidText = '';\n\n  /** Hide the tags below multi-select. */\n  @property({ type: Boolean })\n  hideTags = false;\n\n  /** Adds a \"Select all\" option to the top of a multi-select dropdown. */\n  @property({ type: Boolean })\n  selectAll = false;\n\n  /** \"Select all\" text customization. */\n  @property({ type: String })\n  selectAllText = 'Select all';\n\n  /** Is \"Select All\" box checked.\n   * @internal\n   */\n  @property({ type: Boolean })\n  selectAllChecked = false;\n\n  /** Is \"Select All\" indeterminate.\n   * @internal\n   */\n  @property({ type: Boolean })\n  selectAllIndeterminate = false;\n\n  /**\n   * Selected option value.\n   * @ignore\n   */\n  @state()\n  value: any = '';\n\n  /**\n   * Selected option text, automatically derived.\n   * @ignore\n   */\n  @state()\n  text = '';\n\n  /**\n   * Search input value.\n   * @ignore\n   */\n  @state()\n  searchText = '';\n\n  /**\n   * Assistive text for screen readers.\n   * @ignore\n   */\n  @state()\n  assistiveText = 'Dropdown menu options.';\n\n  /**\n   * Queries any slotted options.\n   * @ignore\n   */\n  @queryAssignedElements({ selector: 'kyn-dropdown-option' })\n  options!: Array<any>;\n\n  /**\n   * Queries any slotted selected options.\n   * @ignore\n   */\n  @queryAssignedElements({ selector: 'kyn-dropdown-option[selected]' })\n  selectedOptions!: Array<any>;\n\n  /**\n   * Queries the .search DOM element.\n   * @ignore\n   */\n  @query('.search')\n  searchEl!: HTMLInputElement;\n\n  /**\n   * Queries the .select DOM element.\n   * @ignore\n   */\n  @query('.select')\n  buttonEl!: HTMLElement;\n\n  /**\n   * Queries the .options DOM element.\n   * @ignore\n   */\n  @query('.options')\n  listboxEl!: HTMLElement;\n\n  /**\n   * Internal validation message.\n   * @ignore\n   */\n  @state()\n  internalValidationMsg = '';\n\n  /**\n   * isInvalid when internalValidationMsg or invalidText is non-empty.\n   * @ignore\n   */\n  @state()\n  isInvalid = false;\n\n  /**\n   * Open drawer upwards.\n   * @ignore\n   */\n  @state()\n  _openUpwards = false;\n\n  override render() {\n    return html`\n      <div\n        class=\"dropdown\"\n        ?disabled=${this.disabled}\n        ?open=${this.open}\n        ?inline=${this.inline}\n        ?searchable=${this.searchable}\n      >\n        <label for=${this.name} id=\"label-${this.name}\" class=\"label-text\">\n          ${this.required ? html`<span class=\"required\">*</span>` : null}\n          <slot name=\"label\"></slot>\n        </label>\n\n        <div\n          class=${classMap({\n            wrapper: true,\n            open: this.open,\n          })}\n        >\n          <div class=\"custom\">\n            <div\n              class=\"${classMap({\n                select: true,\n                'size--sm': this.size === 'sm',\n                'size--lg': this.size === 'lg',\n                inline: this.inline,\n              })}\"\n              aria-labelledby=\"label-${this.name}\"\n              ?required=${this.required}\n              ?disabled=${this.disabled}\n              ?invalid=${this.isInvalid}\n              @click=${() => this.handleClick()}\n              @keydown=${(e: any) => this.handleButtonKeydown(e)}\n              @mousedown=${(e: any) => {\n                if (!this.searchable) {\n                  e.preventDefault();\n                }\n              }}\n              @blur=${(e: any) => this.handleButtonBlur(e)}\n            >\n              ${this.multiple && this.value.length\n                ? html`\n                    <button\n                      class=\"clear-multiple\"\n                      aria-label=\"Clear selections\"\n                      @click=${(e: Event) => this.handleClearMultiple(e)}\n                    >\n                      ${this.value.length}\n                      <kd-icon .icon=${clearIcon16}></kd-icon>\n                    </button>\n                  `\n                : null}\n              ${this.searchable\n                ? html`\n                    <input\n                      class=\"search\"\n                      type=\"text\"\n                      placeholder=${this.placeholder}\n                      value=${this.searchText}\n                      ?disabled=${this.disabled}\n                      @keydown=${(e: any) => this.handleSearchKeydown(e)}\n                      @input=${(e: any) => this.handleSearchInput(e)}\n                      @blur=${(e: any) => this.handleSearchBlur(e)}\n                      @click=${(e: any) => this.handleSearchClick(e)}\n                    />\n                  `\n                : html`\n                    <span>\n                      ${this.multiple\n                        ? this.placeholder\n                        : this.value === ''\n                        ? this.placeholder\n                        : this.text}\n                    </span>\n                  `}\n\n              <kd-icon class=\"arrow-icon\" .icon=${downIcon}></kd-icon>\n            </div>\n\n            <ul\n              class=${classMap({\n                options: true,\n                open: this.open,\n                upwards: this._openUpwards,\n              })}\n              role=\"listbox\"\n              tabindex=\"0\"\n              aria-expanded=${this.open}\n              aria-hidden=${!this.open}\n              @keydown=${(e: any) => this.handleListKeydown(e)}\n              @blur=${(e: any) => this.handleListBlur(e)}\n            >\n              ${this.multiple && this.selectAll\n                ? html`\n                    <kyn-dropdown-option\n                      class=\"select-all\"\n                      value=\"selectAll\"\n                      multiple\n                      ?selected=${this.selectAllChecked}\n                      ?indeterminate=${this.selectAllIndeterminate}\n                      ?disabled=${this.disabled}\n                    >\n                      ${this.selectAllText}\n                    </kyn-dropdown-option>\n                  `\n                : null}\n\n              <slot\n                id=\"children\"\n                @slotchange=${() => this.handleSlotChange()}\n              ></slot>\n            </ul>\n          </div>\n\n          ${this.searchable && this.searchEl && this.searchText !== ''\n            ? html`\n                <button\n                  class=\"clear\"\n                  aria-label=\"Clear search text\"\n                  @click=${(e: any) => this.handleClear(e)}\n                >\n                  <kd-icon .icon=${clearIcon}></kd-icon>\n                </button>\n              `\n            : null}\n          ${this.isInvalid\n            ? html` <kd-icon class=\"error-icon\" .icon=${errorIcon}></kd-icon> `\n            : null}\n        </div>\n\n        ${this.multiple && !this.hideTags && this.value.length\n          ? html`\n              <kyn-tag-group filter>\n                ${this.value.map((value: string) => {\n                  const option = this.options.find(\n                    (option) => option.value === value\n                  );\n                  let text = '';\n\n                  if (option?.shadowRoot?.querySelector('slot')) {\n                    const nodes = option.shadowRoot\n                      .querySelector('slot')\n                      .assignedNodes({\n                        flatten: true,\n                      });\n\n                    for (let i = 0; i < nodes.length; i++) {\n                      text += nodes[i].textContent.trim();\n                    }\n                  }\n\n                  return html`\n                    <kyn-tag\n                      label=${text}\n                      @on-close=${(e: any) =>\n                        this.handleTagClear(e.detail.value)}\n                    ></kyn-tag>\n                  `;\n                })}\n              </kyn-tag-group>\n            `\n          : null}\n        ${this.caption !== ''\n          ? html` <div class=\"caption\">${this.caption}</div> `\n          : null}\n        ${this.isInvalid\n          ? html`\n              <div class=\"error\">\n                ${this.invalidText || this.internalValidationMsg}\n              </div>\n            `\n          : null}\n\n        <div\n          class=\"assistive-text\"\n          role=\"status\"\n          aria-live=\"assertive\"\n          aria-relevant=\"additions text\"\n        >\n          ${this.assistiveText}\n        </div>\n      </div>\n    `;\n  }\n\n  override firstUpdated() {\n    // set a default placeholder if none provided\n    if (this.placeholder === '') {\n      if (this.searchable) {\n        this.placeholder = 'Search';\n      } else {\n        if (this.multiple) {\n          this.placeholder = 'Select items';\n        } else {\n          this.placeholder = 'Select an option';\n        }\n      }\n    }\n  }\n\n  private handleSlotChange() {\n    this.resetSelection();\n  }\n\n  /**\n   * Retrieves the selected values from the list of child options and sets value property.\n   * @function\n   */\n  public resetSelection() {\n    this._updateChildren();\n    this.emitValue();\n  }\n\n  private handleClick() {\n    if (!this.disabled) {\n      this.open = !this.open;\n\n      // focus search input if searchable\n      if (this.searchable) {\n        this.searchEl.focus();\n      }\n    }\n  }\n\n  private handleButtonKeydown(e: any) {\n    this.handleKeyboard(e, e.keyCode, 'button');\n  }\n\n  private handleListKeydown(e: any) {\n    const TAB_KEY_CODE = 9;\n\n    if (e.keyCode !== TAB_KEY_CODE) {\n      e.preventDefault();\n    }\n\n    this.handleKeyboard(e, e.keyCode, 'list');\n  }\n\n  private handleListBlur(e: any) {\n    this.options.forEach((option) => (option.highlighted = false));\n\n    // don't blur if clicking an option inside\n    if (\n      !e.relatedTarget ||\n      (e.relatedTarget && e.relatedTarget.localName !== 'kyn-dropdown-option')\n    ) {\n      this.open = false;\n    }\n    this.assistiveText = 'Dropdown menu options.';\n  }\n\n  private handleKeyboard(e: any, keyCode: number, target: string) {\n    const SPACEBAR_KEY_CODE = [0, 32];\n    const ENTER_KEY_CODE = 13;\n    const DOWN_ARROW_KEY_CODE = 40;\n    const UP_ARROW_KEY_CODE = 38;\n    const ESCAPE_KEY_CODE = 27;\n\n    // get highlighted element + index and selected element\n    const highlightedEl = this.options.find(\n      (option: any) => option.highlighted\n    );\n    const selectedEl = this.options.find((option: any) => option.selected);\n    const highlightedIndex = highlightedEl\n      ? this.options.indexOf(highlightedEl)\n      : this.options.find((option: any) => option.selected)\n      ? this.options.indexOf(selectedEl)\n      : 0;\n\n    // prevent page scroll on spacebar press\n    if (SPACEBAR_KEY_CODE.includes(keyCode)) {\n      e.preventDefault();\n    }\n\n    // open the listbox\n    if (target === 'button') {\n      const openDropdown =\n        SPACEBAR_KEY_CODE.includes(keyCode) ||\n        keyCode === ENTER_KEY_CODE ||\n        keyCode == DOWN_ARROW_KEY_CODE ||\n        keyCode == UP_ARROW_KEY_CODE;\n\n      if (openDropdown) {\n        this.open = true;\n        this.options[highlightedIndex].highlighted = true;\n\n        // scroll to highlighted option\n        if (!this.multiple && this.value !== '') {\n          this.options[highlightedIndex].scrollIntoView({ block: 'nearest' });\n        }\n      }\n    }\n\n    switch (keyCode) {\n      case ENTER_KEY_CODE: {\n        // select highlighted option\n        if (target === 'list') {\n          this.updateValue(\n            this.options[highlightedIndex].value,\n            !this.options[highlightedIndex].selected\n          );\n          this.assistiveText = 'Selected an item.';\n        }\n        return;\n      }\n      case DOWN_ARROW_KEY_CODE: {\n        // go to next option\n        let nextIndex =\n          !highlightedEl && !selectedEl\n            ? 0\n            : highlightedIndex === this.options.length - 1\n            ? 0\n            : highlightedIndex + 1;\n\n        // skip disabled options\n        if (this.options[nextIndex].disabled) {\n          nextIndex = nextIndex === this.options.length - 1 ? 0 : nextIndex + 1;\n        }\n\n        this.options[highlightedIndex].highlighted = false;\n        this.options[nextIndex].highlighted = true;\n\n        // scroll to option\n        this.options[nextIndex].scrollIntoView({ block: 'nearest' });\n\n        this.assistiveText = this.options[nextIndex].text;\n        return;\n      }\n      case UP_ARROW_KEY_CODE: {\n        // go to previous option\n        let nextIndex =\n          highlightedIndex === 0\n            ? this.options.length - 1\n            : highlightedIndex - 1;\n\n        // skip disabled options\n        if (this.options[nextIndex].disabled) {\n          nextIndex = nextIndex === 0 ? this.options.length - 1 : nextIndex - 1;\n        }\n\n        this.options[highlightedIndex].highlighted = false;\n        this.options[nextIndex].highlighted = true;\n\n        // scroll to option\n        this.options[nextIndex].scrollIntoView({ block: 'nearest' });\n\n        this.assistiveText = this.options[nextIndex].text;\n        return;\n      }\n      case ESCAPE_KEY_CODE: {\n        // close listbox\n        this.open = false;\n\n        // restore focus\n        if (this.searchable) {\n          this.searchEl.focus();\n        } else {\n          this.buttonEl.focus();\n        }\n\n        this.assistiveText = 'Dropdown menu options.';\n        return;\n      }\n      default: {\n        return;\n      }\n    }\n  }\n\n  private handleClearMultiple(e: any) {\n    e.stopPropagation();\n\n    // clear values\n    if (this.multiple) {\n      this.value = [];\n    } else {\n      this.value = '';\n    }\n\n    this._validate(true, false);\n    this._updateSelectedOptions();\n    this.emitValue();\n  }\n\n  private handleTagClear(value: string) {\n    // remove value\n    this.updateValue(value, false);\n    this._updateSelectedOptions();\n    this.emitValue();\n  }\n\n  private handleClear(e: any) {\n    e.stopPropagation();\n\n    // reset search input text\n    this.text = '';\n    this.searchText = '';\n    this.searchEl.value = '';\n\n    this._emitSearch();\n\n    // clear selection for single select\n    if (!this.multiple) {\n      this.value = '';\n      this._updateSelectedOptions();\n      this.emitValue();\n    }\n  }\n\n  private handleSearchClick(e: any) {\n    e.stopPropagation();\n    this.open = true;\n  }\n\n  private handleButtonBlur(e: any) {\n    // don't blur if entering listbox or search input\n    if (\n      !e.relatedTarget?.classList.contains('options') &&\n      !e.relatedTarget?.classList.contains('search')\n    ) {\n      this.open = false;\n    }\n  }\n\n  private handleSearchBlur(e: any) {\n    // don't blur if entering listbox of button\n    if (\n      !e.relatedTarget ||\n      (e.relatedTarget.localName !== 'kyn-dropdown-option' &&\n        !e.relatedTarget?.classList.contains('options') &&\n        !e.relatedTarget?.classList.contains('select'))\n    ) {\n      this.open = false;\n    }\n  }\n\n  private handleSearchKeydown(e: any) {\n    e.stopPropagation();\n\n    const ENTER_KEY_CODE = 13;\n    const ESCAPE_KEY_CODE = 27;\n    const option = this.options.find((option) => option.highlighted);\n\n    // select option\n    if (e.keyCode === ENTER_KEY_CODE && option) {\n      this.updateValue(option.value, option.selected);\n      this.assistiveText = 'Selected an item.';\n    }\n\n    // close listbox\n    if (e.keyCode === ESCAPE_KEY_CODE) {\n      this.open = false;\n      this.buttonEl.focus();\n    }\n  }\n\n  private handleSearchInput(e: any) {\n    const value = e.target.value;\n    this.searchText = value;\n    this.open = true;\n\n    this._emitSearch();\n\n    // find matches\n    const options = this.options.filter((option: any) => {\n      const text = option.text;\n      return text.toLowerCase().startsWith(value.toLowerCase());\n    });\n\n    // reset options highlighted state\n    this.options.forEach((option) => (option.highlighted = false));\n\n    // option highlight and scroll\n    if (value !== '' && options.length) {\n      options[0].highlighted = true;\n      options[0].scrollIntoView({ block: 'nearest' });\n    }\n  }\n\n  private _updateSelectedOptions() {\n    // set selected state for each option\n    this.options.forEach((option: any) => {\n      if (this.multiple) {\n        option.selected = this.value.includes(option.value);\n      } else {\n        option.selected = this.value === option.value;\n      }\n    });\n  }\n\n  private _handleClick(e: any) {\n    if (e.detail.value === 'selectAll') {\n      if (e.detail.selected) {\n        this.value = this.options\n          .filter((option) => !option.disabled)\n          .map((option) => {\n            return option.value;\n          });\n        this.assistiveText = 'Selected all items.';\n      } else {\n        this.value = [];\n        this.assistiveText = 'Deselected all items.';\n      }\n\n      this._validate(true, false);\n    } else {\n      this.updateValue(e.detail.value, e.detail.selected);\n      this.assistiveText = 'Selected an item.';\n    }\n\n    this._updateSelectedOptions();\n\n    // emit selected value\n    this.emitValue();\n  }\n\n  private _handleBlur(e: any) {\n    const relatedTarget = e.detail.origEvent.relatedTarget;\n\n    if (\n      !relatedTarget ||\n      (relatedTarget.localName !== 'kyn-dropdown-option' &&\n        relatedTarget.localName !== 'kyn-dropdown')\n    ) {\n      this.open = false;\n    }\n  }\n\n  private _handleFormdata(e: any) {\n    if (this.multiple) {\n      this.value.forEach((value: string) => {\n        e.formData.append(this.name, value);\n      });\n    } else {\n      e.formData.append(this.name, this.value);\n    }\n  }\n\n  private _handleInvalid() {\n    this._validate(true, false);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    // capture child options click event\n    this.addEventListener('on-click', (e: any) => this._handleClick(e));\n\n    // capture child options blur event\n    this.addEventListener('on-blur', (e: any) => this._handleBlur(e));\n\n    if (this.internals.form) {\n      this.internals.form.addEventListener('formdata', (e) =>\n        this._handleFormdata(e)\n      );\n\n      this.addEventListener('invalid', () => {\n        this._handleInvalid();\n      });\n    }\n  }\n\n  override disconnectedCallback() {\n    this.addEventListener('on-click', (e: any) => this._handleClick(e));\n    this.addEventListener('on-blur', (e: any) => this._handleBlur(e));\n\n    if (this.internals.form) {\n      this.internals.form.removeEventListener('formdata', (e) =>\n        this._handleFormdata(e)\n      );\n\n      this.removeEventListener('invalid', () => {\n        this._handleInvalid();\n      });\n    }\n\n    super.disconnectedCallback();\n  }\n\n  private updateValue(value: string, selected = false) {\n    const values = JSON.parse(JSON.stringify(this.value));\n\n    // set value\n    if (this.multiple) {\n      // update array\n      if (selected) {\n        values.push(value);\n      } else {\n        const index = values.indexOf(value);\n        values.splice(index, 1);\n      }\n\n      this.value = values;\n    } else {\n      this.value = value;\n    }\n\n    this._validate(true, false);\n\n    // reset focus\n    if (!this.multiple) {\n      if (this.searchable) {\n        this.searchEl.focus();\n      } else {\n        this.buttonEl.focus();\n      }\n    }\n  }\n\n  private _validate(interacted: Boolean, report: Boolean) {\n    // set validity flags\n    const Validity = {\n      customError: this.invalidText !== '',\n      valueMissing:\n        this.required &&\n        (!this.value ||\n          (this.multiple && !this.value.length) ||\n          (!this.multiple && this.value === '')),\n    };\n\n    // set validationMessage\n    const InternalMsg =\n      this.required && !this.value.length ? 'Please fill out this field.' : '';\n    const ValidationMessage =\n      this.invalidText !== '' ? this.invalidText : InternalMsg;\n\n    // set validity on custom element, anchor to buttonEl\n    this.internals.setValidity(Validity, ValidationMessage, this.buttonEl);\n\n    // set internal validation message if value was changed by user input\n    if (interacted) {\n      this.internalValidationMsg = InternalMsg;\n    }\n\n    // focus the buttonEl to show validity\n    if (report) {\n      this.internals.reportValidity();\n    }\n  }\n\n  private emitValue() {\n    const event = new CustomEvent('on-change', {\n      detail: {\n        value: this.value,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private _emitSearch() {\n    const event = new CustomEvent('on-search', {\n      detail: {\n        searchText: this.searchText,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  override willUpdate(changedProps: any) {\n    if (changedProps.has('open')) {\n      if (this.open) {\n        // open dropdown upwards if closer to bottom fo viewport\n        if (\n          this.buttonEl.getBoundingClientRect().top >\n          window.innerHeight * 0.6\n        ) {\n          this._openUpwards = true;\n        } else {\n          this._openUpwards = false;\n        }\n      }\n    }\n  }\n\n  override updated(changedProps: any) {\n    if (\n      changedProps.has('invalidText') ||\n      changedProps.has('internalValidationMsg')\n    ) {\n      //check if any (internal / external )error msg. present then isInvalid is true\n      this.isInvalid =\n        this.invalidText !== '' || this.internalValidationMsg !== ''\n          ? true\n          : false;\n    }\n\n    if (\n      changedProps.has('invalidText') &&\n      changedProps.get('invalidText') !== undefined\n    ) {\n      this._validate(false, false);\n    }\n\n    if (changedProps.has('value')) {\n      this._validate(false, false);\n\n      const Slot: any = this.shadowRoot?.querySelector('slot#children');\n      const Options: Array<any> = Slot.assignedElements().filter(\n        (option: any) => !option.disabled\n      );\n      const SelectedOptions: Array<any> = Options.filter(\n        (option: any) => option.selected\n      );\n\n      // sync \"Select All\" checkbox state\n      this.selectAllChecked = SelectedOptions.length === Options.length;\n\n      // sync \"Select All\" indeterminate state\n      this.selectAllIndeterminate =\n        SelectedOptions.length < Options.length && SelectedOptions.length > 0;\n\n      // close listbox\n      if (!this.multiple) {\n        this.open = false;\n      }\n\n      // set form data value\n      // if (this.multiple) {\n      //   const entries = new FormData();\n      //   this.value.forEach((value: string) => {\n      //     entries.append(this.name, value);\n      //   });\n      //   this.internals.setFormValue(entries);\n      // } else {\n      //   this.internals.setFormValue(this.value);\n      // }\n\n      // update selected option text\n      if (!this.multiple) {\n        if (this.options.length && this.value !== '') {\n          const option = this.options.find(\n            (option) => option.value === this.value\n          );\n          let text = '';\n\n          if (option?.shadowRoot?.querySelector('slot')) {\n            const nodes = option.shadowRoot\n              .querySelector('slot')\n              .assignedNodes({\n                flatten: true,\n              });\n\n            for (let i = 0; i < nodes.length; i++) {\n              text += nodes[i].textContent.trim();\n            }\n          }\n\n          this.text = text;\n        }\n\n        // set search input value\n        if (this.searchable) {\n          this.searchText = this.text === this.placeholder ? '' : this.text;\n          this.searchEl.value = this.searchText;\n        }\n      }\n    }\n\n    if (changedProps.has('open')) {\n      if (this.open && !this.searchable) {\n        // focus listbox if not searchable\n        this.listboxEl.focus({ preventScroll: true });\n        this.assistiveText =\n          'Selecting items. Use up and down arrow keys to navigate.';\n      }\n    }\n\n    if (changedProps.has('multiple')) {\n      // set multiple for each option\n      this.options.forEach((option: any) => {\n        option.multiple = this.multiple;\n      });\n    }\n  }\n\n  private _updateChildren() {\n    const Slot: any = this.shadowRoot?.querySelector('slot#children');\n    const Options = Slot?.assignedElements();\n\n    // get value from selected options\n    if (Options) {\n      const values: any = [];\n      let value = '';\n      Options.forEach((option: any) => {\n        option.multiple = this.multiple;\n\n        if (option.selected) {\n          if (this.multiple) {\n            values.push(option.value);\n          } else {\n            value = option.value;\n          }\n        }\n      });\n\n      // set initial values\n      if (this.multiple) {\n        this.value = values;\n      } else {\n        this.value = value;\n      }\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-dropdown': Dropdown;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport DropdownOptionScss from './dropdownOption.scss';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport checkmarkIcon from '@carbon/icons/es/checkmark/20';\n\n/**\n * Dropdown option.\n * @fires on-click - Emits the option details to the parent dropdown.\n * @slot unnamed - Slot for option text.\n */\n@customElement('kyn-dropdown-option')\nexport class DropdownOption extends LitElement {\n  static override styles = DropdownOptionScss;\n\n  /** Option value. */\n  @property({ type: String })\n  value = '';\n\n  /** Option selected state. */\n  @property({ type: Boolean, reflect: true })\n  selected = false;\n\n  /** Option disabled state. */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /**\n   * Option highlighted state for keyboard navigation, automatically derived.\n   * @ignore\n   */\n  @state()\n  highlighted = false;\n\n  /** Multi-select state, derived from parent.\n   * @ignore\n   */\n  @property({ type: Boolean })\n  multiple = false;\n\n  /**\n   * Option text, automatically derived.\n   * @ignore\n   */\n  @property()\n  text: any = '';\n\n  /** Determines whether the checkbox is in an indeterminate state. */\n  @property({ type: Boolean, reflect: true })\n  indeterminate = false;\n\n  override render() {\n    return html`\n      <li\n        role=\"option\"\n        ?highlighted=${this.highlighted}\n        ?selected=${this.selected}\n        ?disabled=${this.disabled}\n        ?multiple=${this.multiple}\n        @click=${(e: any) => this.handleClick(e)}\n        @blur=${(e: any) => this.handleBlur(e)}\n        tabindex=\"-1\"\n      >\n        <span>\n          ${this.multiple\n            ? html`\n                <input\n                  type=\"checkbox\"\n                  tabindex=\"-1\"\n                  @mousedown=${(e: any) => e.preventDefault()}\n                  .checked=${this.selected}\n                  ?checked=${this.selected}\n                  ?disabled=${this.disabled}\n                  .indeterminate=${this.indeterminate}\n                />\n              `\n            : null}\n\n          <slot @slotchange=${(e: any) => this.handleSlotChange(e)}></slot>\n        </span>\n\n        ${this.selected && !this.multiple\n          ? html`<kd-icon .icon=${checkmarkIcon}></kd-icon>`\n          : null}\n      </li>\n    `;\n  }\n\n  private handleSlotChange(e: any) {\n    // set text prop from slotted text, for ease of access\n    const nodes = e.target.assignedNodes({ flatten: true });\n    let text = '';\n\n    for (let i = 0; i < nodes.length; i++) {\n      text += nodes[i].textContent.trim();\n    }\n\n    this.text = text;\n  }\n\n  private handleClick(e: Event) {\n    // prevent click if disabled\n    if (this.disabled) {\n      return;\n    }\n\n    // update selected state\n    if (this.multiple) {\n      this.selected = !this.selected;\n    } else {\n      this.selected = true;\n    }\n\n    // emit selected value, bubble so it can be captured by the parent dropdown\n    const event = new CustomEvent('on-click', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        selected: this.selected,\n        value: this.value,\n        origEvent: e,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private handleBlur(e: any) {\n    // emit blur event, bubble so it can be captured by the parent dropdown\n    const event = new CustomEvent('on-blur', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        origEvent: e,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-dropdown-option': DropdownOption;\n  }\n}\n"],"names":[],"sourceRoot":""}