{"version":3,"file":"5184.1672f153.iframe.bundle.js","mappings":";;;;AA0HA;AACA;;AAEA;;;;;;;AAOA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAGA;;AAGA;;AAEA;AAEA;AAIA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/daterangepicker/daterangepicker.ts"],"sourcesContent":["import { LitElement, html, PropertyValues } from 'lit';\nimport { customElement, property, state, query } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport DateRangePickerScss from './daterangepicker.scss';\n\n/**\n * Date-Range picker\n * @fires on-input - Captures the input event and emits the selected values and original event details. (Only if startDate <= endDate)\n * @prop {string} minDate - Mimimum date in YYYY-MM-DD format. If the value isn't a possible date string in the format, then the element has no minimum date value.\n * @prop {string} maxDate - Maximum date in YYYY-MM-DD format. If the value isn't a possible date string in the format, then the element has no maximum date value.\n * @slot unnamed - Slot for label text.\n */\n@customElement('kyn-date-range-picker')\nexport class DateRangePicker extends LitElement {\n  static override styles = DateRangePickerScss;\n  /**\n   * Associate the component with forms.\n   * @ignore\n   */\n  static formAssociated = true;\n\n  /** @ignore */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Attached internals for form association.\n   * @ignore\n   */\n  @state()\n  internals = this.attachInternals();\n\n  /** Optional text beneath the input. */\n  @property({ type: String })\n  caption = '';\n\n  /** Datepicker size. \"sm\", \"md\", or \"lg\". */\n  @property({ type: String })\n  size = 'md';\n\n  /** Datepicker Start date in YYYY-MM-DD format. */\n  @property({ type: String })\n  startDate = '';\n\n  /** Datepicker End date in YYYY-MM-DD format. */\n  @property({ type: String })\n  endDate = '';\n\n  /** Datepicker name. Required prop. as there could many fields into single form*/\n  @property({ type: String })\n  name = '';\n\n  /** Makes the date required. */\n  @property({ type: Boolean })\n  required = false;\n\n  /** Date disabled state. */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /** Date invalid text. */\n  @property({ type: String })\n  invalidText = '';\n\n  /** Date warning text */\n  @property({ type: String })\n  warnText = '';\n\n  /** Maximum date in YYYY-MM-DD format.\n   * If the value isn't a possible date string in the format, then the element has no maximum date value\n   */\n  @property({ type: String })\n  maxDate!: string;\n\n  /** Minimum date in YYYY-MM-DD format,\n   * If the value isn't a possible date string in the format, then the element has no minimum date value.\n   */\n  @property({ type: String })\n  minDate!: string;\n\n  /** Specifies the granularity that the value must adhere to, or the special value any,\n   * For date inputs, the value of step is given in days; and is treated as a number of milliseconds equal to 86,400,000 times the step value.\n   * The default value of step is 1, indicating 1 day.*/\n  @property({ type: String })\n  step!: string;\n\n  /**\n   * Internal validation message.\n   * @ignore\n   */\n  @state()\n  internalValidationMsg = '';\n\n  /**\n   * isInvalid when internalValidationMsg or invalidText is non-empty.\n   * @ignore\n   */\n  @state()\n  isInvalid = false;\n\n  /**\n   * Queries the Start Date <input> DOM element.\n   * @ignore\n   */\n  @query('input.date-start')\n  inputElStart!: HTMLInputElement;\n\n  /**\n   * Queries the End Date <input> DOM element.\n   * @ignore\n   */\n  @query('input.date-end')\n  inputElEnd!: HTMLInputElement;\n\n  override render() {\n    return html`\n      <label\n        class=\"datepicker-label-text\"\n        for=${this.name}\n        ?disabled=${this.disabled}\n      >\n        ${this.required ? html`<span class=\"required\">*</span>` : null}\n        <slot></slot>\n      </label>\n\n      <div class=\"wrapper\">\n        <div class=\"input-wrapper\">\n          <input\n            class=\"${classMap({\n              'date-start': true,\n              'size--sm': this.size === 'sm',\n              'size--lg': this.size === 'lg',\n            })}\"\n            type=\"date\"\n            id=\"${this.name}-start\"\n            name=\"${this.name}-end\"\n            aria-label=\"Start Date\"\n            value=${this.startDate}\n            ?required=${this.required}\n            ?disabled=${this.disabled}\n            ?invalid=${this.isInvalid}\n            min=${ifDefined(this.minDate)}\n            max=${ifDefined(this.endDate ?? this.maxDate ?? '')}\n            step=${ifDefined(this.step)}\n            @input=${(e: any) => this.handleStartDate(e)}\n          />\n        </div>\n\n        <span class=\"range-span\">â€”</span>\n        <div class=\"input-wrapper\">\n          <input\n            class=\"${classMap({\n              'date-end': true,\n              'size--sm': this.size === 'sm',\n              'size--lg': this.size === 'lg',\n            })}\"\n            type=\"date\"\n            id=\"${this.name}-end\"\n            name=\"${this.name}-end\"\n            aria-label=\"End Date\"\n            value=${this.endDate}\n            ?required=${this.required}\n            ?disabled=${this.disabled}\n            ?invalid=${this.isInvalid}\n            min=${ifDefined(this.startDate ?? this.minDate ?? '')}\n            max=${ifDefined(this.maxDate)}\n            step=${ifDefined(this.step)}\n            @input=${(e: any) => this.handleEndDate(e)}\n          />\n        </div>\n      </div>\n\n      ${this.caption !== ''\n        ? html` <div class=\"caption\">${this.caption}</div> `\n        : null}\n      ${this.isInvalid\n        ? html`\n            <div class=\"error\">\n              ${this.invalidText || this.internalValidationMsg}\n            </div>\n          `\n        : null}\n      ${this.warnText !== '' && !this.isInvalid\n        ? html`<div class=\"warn\">${this.warnText}</div>`\n        : null}\n    `;\n  }\n\n  override updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has('invalidText') ||\n      changedProps.has('internalValidationMsg')\n    ) {\n      this.isInvalid =\n        this.invalidText !== '' || this.internalValidationMsg !== ''\n          ? true\n          : false;\n    }\n\n    if (\n      changedProps.has('invalidText') &&\n      changedProps.get('invalidText') !== undefined\n    ) {\n      this._validate(false, false);\n    }\n\n    if (changedProps.has('startDate') || changedProps.has('endDate')) {\n      this._validate(false, false);\n    }\n  }\n\n  // on-change start date\n  private async handleStartDate(e: any) {\n    this.startDate = e.target.value;\n\n    await this.updateComplete;\n    this._validate(true, false);\n    this._emitValue(e);\n  }\n\n  // on-change end date\n  private async handleEndDate(e: any) {\n    this.endDate = e.target.value;\n\n    await this.updateComplete;\n    this._validate(true, false);\n    this._emitValue(e);\n  }\n\n  private _validate(interacted: Boolean, report: Boolean) {\n    const StartValid = this.inputElStart.checkValidity();\n    const EndValid = this.inputElEnd.checkValidity();\n\n    if (StartValid && EndValid) {\n      // clear validation errors\n      this.internals.setValidity({});\n    } else if (!StartValid) {\n      // validate start date\n\n      // get validity state from inputEl, combine customError flag if invalidText is provided\n      const Validity =\n        this.invalidText !== ''\n          ? { ...this.inputElStart.validity, customError: true }\n          : this.inputElStart.validity;\n\n      // set validationMessage to invalidText if present, otherwise use inputEl validationMessage\n      const ValidationMessage =\n        this.invalidText !== ''\n          ? this.invalidText\n          : this.inputElStart.validationMessage;\n\n      this.internals.setValidity(\n        Validity,\n        ValidationMessage,\n        this.inputElStart\n      );\n    } else if (!EndValid) {\n      // validate end date\n\n      // get validity state from inputEl, combine customError flag if invalidText is provided\n      const Validity =\n        this.invalidText !== ''\n          ? { ...this.inputElEnd.validity, customError: true }\n          : this.inputElEnd.validity;\n\n      // set validationMessage to invalidText if present, otherwise use inputEl validationMessage\n      const ValidationMessage =\n        this.invalidText !== ''\n          ? this.invalidText\n          : this.inputElEnd.validationMessage;\n\n      this.internals.setValidity(Validity, ValidationMessage, this.inputElEnd);\n    }\n\n    // set internal validation message if value was changed by user input\n    if (interacted) {\n      this.internalValidationMsg =\n        this.inputElStart.validationMessage ||\n        this.inputElEnd.validationMessage;\n    }\n\n    // focus the form field to show validity\n    if (report) {\n      this.internals.reportValidity();\n    }\n  }\n\n  private _emitValue(e: any) {\n    const event = new CustomEvent('on-input', {\n      detail: {\n        startDate: this.startDate,\n        endDate: this.endDate,\n        origEvent: e,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private _handleFormdata(e: any) {\n    const combineVals =\n      this.startDate !== '' && this.endDate !== ''\n        ? `${this.startDate}:${this.endDate}`\n        : '';\n    e.formData.append(this.name, combineVals);\n  }\n\n  private _handleInvalid() {\n    this._validate(true, false);\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n\n    if (this.internals.form) {\n      this.internals.form.addEventListener('formdata', (e) =>\n        this._handleFormdata(e)\n      );\n\n      this.addEventListener('invalid', () => {\n        this._handleInvalid();\n      });\n    }\n  }\n\n  override disconnectedCallback(): void {\n    if (this.internals.form) {\n      this.internals.form.removeEventListener('formdata', (e) =>\n        this._handleFormdata(e)\n      );\n\n      this.removeEventListener('invalid', () => {\n        this._handleInvalid();\n      });\n    }\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-date-range-picker': DateRangePicker;\n  }\n}\n"],"names":[],"sourceRoot":""}