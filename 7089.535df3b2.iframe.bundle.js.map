{"version":3,"file":"7089.535df3b2.iframe.bundle.js","mappings":";;AAiFA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAIA;;AC5CA;;AAEA;;AAGA;AACA;;AAEA;;AAIA;;AAIA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/tag/tag.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/tag/tagGroup.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport clearIcon16 from '@carbon/icons/es/close/16';\nimport TagScss from './tag.scss';\n\n/**\n * Tag.\n * @fires on-close - Captures the close event and emits the Tag value. Works with filterable tags.\n */\n\n@customElement('kyn-tag')\nexport class Tag extends LitElement {\n  static override styles = TagScss;\n\n  /**\n   * Tag name (Required).\n   */\n  @property({ type: String })\n  label = '';\n\n  /**\n   * Size of the tag, `'md'` (default) or `'sm'`. Icon size: 16px.\n   */\n  @property({ type: String })\n  tagSize = 'md';\n\n  /**\n   * Specify if the Tag is disabled.\n   */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /**\n   * Determine if Tag state is filter.\n   */\n  @property({ type: Boolean })\n  filter = false;\n\n  /**\n   * Shade `'light'` (default) and `'dark'` for tag\n   */\n  @property({ type: String })\n  shade = 'light';\n\n  /**\n   * Color variants. Default spruce\n   */\n  @property({ type: String })\n  tagColor = 'spruce';\n\n  override render() {\n    const baseColorClass = `tag-${this.tagColor}`;\n    const shadeClass = this.shade === 'dark' ? '-dark' : '';\n    const sizeClass = this.tagSize === 'md' ? 'tag-medium' : 'tag-small';\n\n    const tagClasses = {\n      tags: true,\n      'tag-disable': this.disabled,\n      [`${baseColorClass}${shadeClass}`]: true,\n      [`${sizeClass}`]: true,\n      [`${sizeClass}-filter`]: this.filter,\n    };\n\n    const iconOutlineClasses = `${baseColorClass}${shadeClass}-close-btn`;\n    const iconOutlineOffsetClass = `tag-close-btn-${this.tagSize}`;\n    const iconClasses = {\n      'tag-close-btn': true,\n      [`${iconOutlineClasses}`]: true,\n      [`${iconOutlineOffsetClass}`]: true,\n    };\n\n    const labelClasses = {\n      'tag-label': true,\n      [`${sizeClass}-label`]: true,\n      [`${sizeClass}-label-filter`]: this.filter,\n    };\n\n    return html`\n      <div\n        class=\"${classMap(tagClasses)}\"\n        tagSize=\"${this.tagSize}\"\n        ?disabled=\"${this.disabled}\"\n        ?filter=${this.filter}\n        tagColor=${this.tagColor}\n        shade=${this.shade}\n        title=\"${this.label}\"\n      >\n        <span class=\"${classMap(labelClasses)}\">${this.label}</span>\n        ${this.filter\n          ? html`\n              <button\n                class=\"${classMap(iconClasses)}\"\n                shade=${this.shade}\n                ?disabled=\"${this.disabled}\"\n                title=\"Clear Tag\"\n                aria-label=\"Clear Tag\"\n                @click=${(e: any) => this.handleTagClear(e, this.label)}\n              >\n                <kd-icon .icon=${clearIcon16}></kd-icon>\n              </button>\n            `\n          : ''}\n      </div>\n    `;\n  }\n\n  private handleTagClear(e: any, value: string) {\n    if (!this.disabled) {\n      const event = new CustomEvent('on-close', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          value,\n          origEvent: e,\n        },\n      });\n      this.dispatchEvent(event);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-tag': Tag;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport './tag';\nimport TagGroupScss from './tagGroup.scss';\n\n/**\n * Tag & Tag Group\n * @slot unnamed - Slot for individual tags.\n */\n\n@customElement('kyn-tag-group')\nexport class TagGroup extends LitElement {\n  static override styles = TagGroupScss;\n\n  /** Text string customization. */\n  @property({ type: Object })\n  textStrings = {\n    showAll: 'Show all',\n    showLess: 'Show less',\n  };\n\n  /** Limits visible tags (5) behind a \"Show all\" button. Use only if having more than 5 tags.*/\n  @property({ type: Boolean })\n  limitTags = false;\n\n  /** Tag limit visibility.\n   * @internal\n   */\n  @state()\n  limitRevealed = false;\n\n  /** Tag group filter */\n  @property({ type: Boolean })\n  filter = false;\n\n  /**\n   * Size of the tag, `'md'` (default) or `'sm'`. Icon size: 16px.\n   */\n  @property({ type: String })\n  tagSize = 'md';\n\n  /**\n   * Queries for slotted tags.\n   * @ignore\n   */\n  @queryAssignedElements()\n  tags!: Array<any>;\n\n  override render() {\n    const toggleBtnClasses = {\n      'tag-reveal-toggle': true,\n      [`tag-reveal-toggle-${this.tagSize}`]: true,\n    };\n\n    return html`\n      <div class=\"tags-container\">\n        <slot @slotchange=${this._handleSlotChange}></slot>\n\n        ${this.limitTags && this.tags.length > 5\n          ? html`\n              <button\n                class=\"${classMap(toggleBtnClasses)}\"\n                @click=${() => this._toggleRevealed(!this.limitRevealed)}\n              >\n                ${this.limitRevealed\n                  ? this.textStrings.showLess\n                  : html` ${this.textStrings.showAll}`}\n              </button>\n            `\n          : null}\n      </div>\n    `;\n  }\n  override updated(changedProps: any) {\n    if (\n      changedProps.has('filter') ||\n      changedProps.has('tagSize') ||\n      changedProps.has('limitTags')\n    ) {\n      this._updateChildren();\n    }\n  }\n\n  private _handleSlotChange() {\n    this._updateChildren();\n    this.requestUpdate();\n  }\n\n  private _updateChildren() {\n    // set filter for each tag\n    this.tags.forEach((tag: any) => {\n      tag.filter = this.filter;\n    });\n\n    // set tag size for each tag\n    this.tags.forEach((tag: any) => {\n      tag.tagSize = this.tagSize;\n    });\n\n    this._toggleRevealed(false);\n  }\n\n  private _toggleRevealed(revealed: boolean) {\n    const Limit = 5;\n    this.limitRevealed = revealed;\n    this.tags.forEach((tagEl, index) => {\n      if (!this.limitTags || this.limitRevealed) {\n        tagEl.style.display = 'inline-block';\n      } else {\n        if (index < Limit) {\n          tagEl.style.display = 'inline-block';\n        } else {\n          tagEl.style.display = 'none';\n        }\n      }\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-tag-group': TagGroup;\n  }\n}\n"],"names":[],"sourceRoot":""}