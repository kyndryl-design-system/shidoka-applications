{"version":3,"file":"9694.c893a8ba.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAoCA;AAwDA;;;;;AAKA;;;AAGA;;;;AAIA;;AAEA;;;;;AAKA;AAGA;;;;;;;AAOA;;;;AAKA;AACA;AACA;;AAEA;;;;;;AAMA;;AAEA;;;;;;;;;;;;AAcA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/modal/modal.ts"],"sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport ModalScss from './modal.scss';\n\nimport '@kyndryl-design-system/shidoka-foundation/components/button';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\n\nimport closeIcon from '@carbon/icons/es/close/32';\n\n/**\n * Modal.\n * @slot unnamed - Slot for modal body content.\n * @slot anchor - Slot for the anchor button content.\n * @fires on-close - Emits the modal close event with `returnValue` (`'ok'` or `'cancel'`).\n */\n@customElement('kyn-modal')\nexport class Modal extends LitElement {\n  static override styles = [\n    ModalScss,\n    css`\n      @supports (transition-behavior: allow-discrete) {\n        @starting-style {\n          dialog[open] {\n            opacity: 0;\n            transform: scale(0);\n          }\n        }\n\n        @starting-style {\n          dialog[open]::backdrop {\n            background-color: rgb(0, 0, 0, 0);\n          }\n        }\n      }\n    `,\n  ];\n\n  /** Modal open state. */\n  @property({ type: Boolean })\n  open = false;\n\n  /** Modal size. `'auto'`, `'md'`, or `'lg'`. */\n  @property({ type: String })\n  size = 'auto';\n\n  /** Title/heading text, required. */\n  @property({ type: String })\n  titleText = '';\n\n  /** Label text, optional. */\n  @property({ type: String })\n  labelText = '';\n\n  /** OK button text. */\n  @property({ type: String })\n  okText = 'OK';\n\n  /** Cancel button text. */\n  @property({ type: String })\n  cancelText = 'Cancel';\n\n  /** Changes the primary button styles to indicate the action is destructive. */\n  @property({ type: Boolean })\n  destructive = false;\n\n  /** Disables the primary button. */\n  @property({ type: Boolean })\n  okDisabled = false;\n\n  /** Hides the footer/action buttons to create a passive modal. */\n  @property({ type: Boolean })\n  hideFooter = false;\n\n  /** Function to execute before the modal can close. Useful for running checks or validations before closing. Exposes `returnValue` (`'ok'` or `'cancel'`). Must return `true` or `false`. */\n  @property({ attribute: false })\n  beforeClose!: Function;\n\n  /** The dialog element\n   * @internal\n   */\n  @query('dialog')\n  _dialog!: any;\n\n  override render() {\n    const classes = {\n      modal: true,\n      'size--md': this.size === 'md',\n      'size--lg': this.size === 'lg',\n    };\n\n    return html`\n      <span class=\"anchor\" @click=${this._openModal}>\n        <slot name=\"anchor\"></slot>\n      </span>\n\n      <dialog\n        class=\"${classMap(classes)}\"\n        autofocus\n        aria-labelledby=\"dialogLabel\"\n        @cancel=${(e: Event) => this._closeModal(e, 'cancel')}\n      >\n        <button\n          class=\"close\"\n          @click=${(e: Event) => this._closeModal(e, 'cancel')}\n        >\n          <kd-icon .icon=${closeIcon}></kd-icon>\n        </button>\n\n        <header>\n          <div>\n            ${this.labelText !== ''\n              ? html`<span class=\"label\">${this.labelText}</span>`\n              : null}\n            <h1 id=\"dialogLabel\">${this.titleText}</h1>\n          </div>\n        </header>\n\n        <form method=\"dialog\" class=\"body\">\n          <slot></slot>\n\n          ${!this.hideFooter\n            ? html`\n                <div class=\"actions\">\n                  <kd-button\n                    value=\"ok\"\n                    ?destructive=${this.destructive}\n                    ?disabled=${this.okDisabled}\n                    @click=${(e: Event) => this._closeModal(e, 'ok')}\n                  >\n                    ${this.okText}\n                  </kd-button>\n\n                  <kd-button\n                    value=\"cancel\"\n                    kind=\"secondary\"\n                    @click=${(e: Event) => this._closeModal(e, 'cancel')}\n                  >\n                    ${this.cancelText}\n                  </kd-button>\n\n                  <!--\n            <div class=\"custom-actions\">\n              <slot name=\"actions\"></slot>\n            </div>\n            -->\n                </div>\n              `\n            : null}\n        </form>\n      </dialog>\n    `;\n  }\n\n  private _openModal() {\n    this.open = true;\n  }\n\n  private _closeModal(e: Event, returnValue: string) {\n    if (\n      !this.beforeClose ||\n      (this.beforeClose && this.beforeClose(returnValue))\n    ) {\n      this.open = false;\n      this._dialog.returnValue = returnValue;\n      this._emitCloseEvent(e);\n    }\n  }\n\n  private _emitCloseEvent(e: Event) {\n    const event = new CustomEvent('on-close', {\n      detail: {\n        returnValue: this._dialog.returnValue,\n        origEvent: e,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  override updated(changedProps: any) {\n    if (changedProps.has('open')) {\n      if (this.open) {\n        this._dialog.showModal();\n      } else {\n        this._dialog.close();\n      }\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-modal': Modal;\n  }\n}\n"],"names":[],"sourceRoot":""}