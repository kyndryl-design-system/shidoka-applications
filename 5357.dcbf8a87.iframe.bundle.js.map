{"version":3,"file":"5357.dcbf8a87.iframe.bundle.js","mappings":";;;AAuDA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;AAKA;;AAEA;AACA;AACA;;;;;AAMA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/tooltip/tooltip.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport TooltipScss from './tooltip.scss';\n\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport infoIcon from '@carbon/icons/es/information/20';\n\n/**\n * Tooltip.\n * @fires on-tooltip-toggle - Emits the open state of the tooltip on open/close.\n * @slot unnamed - Slot for tooltip content.\n * @slot anchor - Slot for custom anchor button content.\n */\n@customElement('kyn-tooltip')\nexport class Tooltip extends LitElement {\n  static override styles = TooltipScss;\n\n  @property({ type: Boolean })\n  open = false;\n\n  /** Tooltip anchor position. `'start'`, `'end'`, or `'center'`. */\n  @property({ type: String })\n  anchorPosition = 'center';\n\n  /** Tooltip direction. `'top'`, `'bottom'`, `'left'`, or `'right'`. */\n  @property({ type: String })\n  direction = 'top';\n\n  /** Assistive text for anchor button. */\n  @property({ type: String })\n  assistiveText = 'Toggle Tooltip';\n\n  /** Timeout function to delay modal close.\n   * @internal\n   */\n  @state()\n  timer: any;\n\n  override render() {\n    const classes = {\n      content: true,\n      open: this.open,\n      'anchor--start': this.anchorPosition === 'start',\n      'anchor--end': this.anchorPosition === 'end',\n      'anchor--center': this.anchorPosition === 'center',\n      'direction--top': this.direction === 'top',\n      'direction--bottom': this.direction === 'bottom',\n      'direction--left': this.direction === 'left',\n      'direction--right': this.direction === 'right',\n    };\n\n    return html`\n      <div class=\"tooltip\">\n        <button\n          aria-label=${this.assistiveText}\n          title=${this.assistiveText}\n          aria-describedby=\"tooltip\"\n          @mouseenter=${this._handleOpen}\n          @mouseleave=${this._handleMouseLeave}\n          @focus=${this._handleOpen}\n          @blur=${this._handleClose}\n        >\n          <slot name=\"anchor\"><kd-icon .icon=${infoIcon}></kd-icon></slot>\n        </button>\n\n        <div\n          id=\"tooltip\"\n          aria-hidden=${!this.open}\n          role=\"tooltip\"\n          class=${classMap(classes)}\n          @mouseenter=${this._handleOpen}\n          @mouseleave=${this._handleMouseLeave}\n        >\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleOpen() {\n    clearTimeout(this.timer);\n    this.open = true;\n  }\n\n  private _handleClose() {\n    this.open = false;\n  }\n\n  private _handleMouseLeave() {\n    this.timer = setTimeout(() => {\n      this.open = false;\n      clearTimeout(this.timer);\n    }, 500);\n  }\n\n  private _handleEsc(e: KeyboardEvent) {\n    if (this.open && e.key === 'Escape') {\n      this.open = false;\n    }\n  }\n\n  private _emitToggle() {\n    const event = new CustomEvent('on-tooltip-toggle', {\n      detail: { open: this.open },\n    });\n    this.dispatchEvent(event);\n  }\n\n  override updated(changedProps: any) {\n    if (changedProps.has('open') && changedProps.get('open') !== undefined) {\n      this._emitToggle();\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    document.addEventListener('keydown', (e) => this._handleEsc(e));\n  }\n\n  override disconnectedCallback() {\n    document.removeEventListener('keydown', (e) => this._handleEsc(e));\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-tooltip': Tooltip;\n  }\n}\n"],"names":[],"sourceRoot":""}