{"version":3,"file":"components-reusable-globalFilter-globalFilter-stories.56ec1495.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AA2BA;;;;;;;;;;ACMA;;;;;;;AA2CA;;;AAGA;;;;;;AAMA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;AAWA;AAGA;;;;AAKA;AAEA;AACA;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;;;;;;AAMA;;;;;AAKA;;;;;;;AAOA;;AAIA;;AAEA;;;;;AAMA;;;;;;AAOA;;AAEA;;;AAGA;;AAIA;;;;;;;;;;ACjKA;;;;;;;AAoFA;;;AAGA;;;;;;AAMA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;AAWA;AAGA;;;;AAKA;AAEA;AACA;;;;;;;;;;;;;;;AAgBA;;AAIA;;AAEA;;;;;AAMA;;;;;;AAOA;;AAEA;;;AAGA;;;;;;;;;;AAWA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;ACtLA;;;;;;;;;;;;;;;;AAmCA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/globalFilter/globalFilter.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/globalFilter/globalFilter.sample.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/globalFilter/globalFilter.chart.sample.ts","webpack://@kyndryl-design-system/shidoka-applications/"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport GlobalFilterScss from './globalFilter.scss';\n\n/**\n * Global Filter bar.\n */\n@customElement('kyn-global-filter')\nexport class GlobalFilter extends LitElement {\n  static override styles = GlobalFilterScss;\n\n  override render() {\n    return html`\n      <div class=\"global-filter\">\n        <div class=\"filter-bar\">\n          <slot></slot>\n\n          <div class=\"actions\">\n            <slot name=\"actions\"></slot>\n          </div>\n        </div>\n\n        <div class=\"tags\">\n          <slot name=\"tags\"></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-global-filter': GlobalFilter;\n  }\n}\n","import { html, css, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { action } from '@storybook/addon-actions';\n\nimport './index';\nimport '../checkbox';\nimport '../modal';\nimport '../textInput';\nimport '../overflowMenu';\nimport '../tag';\nimport '@kyndryl-design-system/shidoka-foundation/components/button';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport '@kyndryl-design-system/shidoka-foundation/components/accordion';\n\nimport searchIcon from '@carbon/icons/es/search/24';\nimport filterIcon from '@carbon/icons/es/filter/20';\nimport filterEditIcon from '@carbon/icons/es/filter--edit/20';\nimport filterRemoveIcon from '@carbon/icons/es/close--filled/16';\nimport refreshIcon from '@carbon/icons/es/renew/20';\n\n/**  Sample Lit component to show global filter pattern. */\n@customElement('sample-filter-component')\nexport class SampleFilterComponent extends LitElement {\n  static override styles = css`\n    .filter-text {\n      display: none;\n    }\n\n    @media (min-width: 42rem) {\n      .filter-text {\n        display: inline;\n      }\n    }\n  `;\n\n  /** Array of sample checkbox filter options. */\n  @property({ type: Array })\n  checkboxOptions: Array<any> = [\n    {\n      value: '1',\n      text: 'Option 1',\n    },\n    {\n      value: '2',\n      text: 'Option 2',\n    },\n    {\n      value: '3',\n      text: 'Option 3',\n    },\n    {\n      value: '4',\n      text: 'Option 4',\n    },\n    {\n      value: '5',\n      text: 'Option 5',\n    },\n    {\n      value: '6',\n      text: 'Option 6',\n    },\n  ];\n\n  override render() {\n    const SelectedOptions = this.checkboxOptions.filter(\n      (option) => option.checked\n    );\n\n    return html`\n      <kyn-global-filter>\n        <kyn-text-input\n          type=\"search\"\n          placeholder=\"Search\"\n          size=\"sm\"\n          hideLabel\n          @on-input=${(e: any) => this._handleSearch(e)}\n        >\n          Search\n          <kd-icon slot=\"icon\" .icon=${searchIcon}></kd-icon>\n        </kyn-text-input>\n\n        <kyn-modal\n          size=\"lg\"\n          titleText=\"Filter\"\n          @on-close=${(e: any) => this._handleModalClose(e)}\n        >\n          <kd-button\n            slot=\"anchor\"\n            kind=\"tertiary\"\n            size=\"small\"\n            iconPosition=\"left\"\n          >\n            <kd-icon\n              slot=\"icon\"\n              .icon=${SelectedOptions.length ? filterEditIcon : filterIcon}\n            ></kd-icon>\n            <span class=\"filter-text\">Filter</span>\n          </kd-button>\n\n          <kd-accordion filledHeaders compact>\n            <kd-accordion-item>\n              <span slot=\"title\">\n                Filter 1:\n                ${SelectedOptions.length\n                  ? SelectedOptions.length + ' items'\n                  : 'Any'}\n              </span>\n              <div slot=\"body\">\n                <kyn-checkbox-group\n                  name=\"filter1\"\n                  hideLegend\n                  selectAll\n                  filterable\n                  limitCheckboxes\n                  .value=${SelectedOptions.map((option) => {\n                    return option.value;\n                  })}\n                  @on-checkbox-group-change=${(e: any) =>\n                    this._handleCheckboxes(e)}\n                >\n                  <span slot=\"label\">Filter 1</span>\n\n                  ${this.checkboxOptions.map(\n                    (option: any) => html`\n                      <kyn-checkbox value=${option.value}>\n                        ${option.text}\n                      </kyn-checkbox>\n                    `\n                  )}\n                </kyn-checkbox-group>\n              </div>\n            </kd-accordion-item>\n\n            <kd-accordion-item>\n              <span slot=\"title\">Filter 2: Any</span>\n              <div slot=\"body\">Some other filter control here.</div>\n            </kd-accordion-item>\n          </kd-accordion>\n        </kyn-modal>\n\n        <kd-button\n          slot=\"actions\"\n          kind=\"tertiary\"\n          size=\"small\"\n          iconPosition=\"left\"\n          @on-click=${(e: any) => this._handleCustomAction(e)}\n        >\n          <kd-icon slot=\"icon\" .icon=${refreshIcon}></kd-icon>\n          <span class=\"filter-text\">Custom Action</span>\n        </kd-button>\n\n        <kyn-overflow-menu slot=\"actions\" anchorRight verticalDots>\n          <kyn-overflow-menu-item\n            @on-click=${(e: any) => this._handleOverflowClick(e)}\n          >\n            Option 1\n          </kyn-overflow-menu-item>\n          <kyn-overflow-menu-item\n            @on-click=${(e: any) => this._handleOverflowClick(e)}\n          >\n            Option 2\n          </kyn-overflow-menu-item>\n        </kyn-overflow-menu>\n\n        <kyn-tag-group slot=\"tags\" filter limitTags>\n          ${SelectedOptions.map(\n            (filter) =>\n              html`\n                <kyn-tag\n                  label=${filter.text}\n                  tagColor=\"grey\"\n                  @on-close=${(e: any) => this._handleTagClick(e, filter)}\n                ></kyn-tag>\n              `\n          )}\n        </kyn-tag-group>\n\n        ${SelectedOptions.length\n          ? html`\n              <kd-button\n                slot=\"tags\"\n                kind=\"tertiary\"\n                size=\"small\"\n                iconPosition=\"right\"\n                @on-click=${(e: any) => this._handleClearTags(e)}\n              >\n                <kd-icon slot=\"icon\" .icon=${filterRemoveIcon}></kd-icon>\n                Clear All\n              </kd-button>\n            `\n          : null}\n      </kyn-global-filter>\n    `;\n  }\n\n  private _handleSearch(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // perform filtering here\n  }\n\n  private _handleCheckboxes(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    const Value = e.detail.value;\n\n    // update checked state for each option\n    this.checkboxOptions = this.checkboxOptions.map((option) => {\n      return { ...option, checked: Value.includes(option.value) };\n    });\n\n    // perform filtering here (client-side scenario)\n  }\n\n  private _handleModalClose(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // handle modal close here\n\n    if (e.detail.returnValue === 'ok') {\n      // modal was closed with OK/primary action, logic to perform filtering here (server-side scenario)\n    } else {\n      // modal was closed with cancel/secondary action/x, logic to revert filters here\n    }\n  }\n\n  private _handleTagClick(e: any, option: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // remove tag by setting checkbox option checked value to false\n    option.checked = false;\n\n    // perform filtering here\n\n    // force update/render, since objects are updated by reference\n    this.requestUpdate();\n  }\n\n  private _handleClearTags(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // update checked state for each option\n    this.checkboxOptions = this.checkboxOptions.map((option) => {\n      return { ...option, checked: false };\n    });\n\n    // perform filtering here\n  }\n\n  private _handleCustomAction(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // custom action logic here\n  }\n\n  private _handleOverflowClick(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // overflow link click logic here\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sample-filter-component': SampleFilterComponent;\n  }\n}\n","import { html, css, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { action } from '@storybook/addon-actions';\n\nimport './index';\nimport '../checkbox';\nimport '../modal';\nimport '../textInput';\nimport '../overflowMenu';\nimport '../tag';\nimport '@kyndryl-design-system/shidoka-foundation/components/button';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport '@kyndryl-design-system/shidoka-foundation/components/accordion';\nimport '@kyndryl-design-system/shidoka-charts/components/chart';\n\nimport searchIcon from '@carbon/icons/es/search/24';\nimport filterIcon from '@carbon/icons/es/filter/20';\nimport filterEditIcon from '@carbon/icons/es/filter--edit/20';\nimport filterRemoveIcon from '@carbon/icons/es/close--filled/16';\n\n/**  Sample Lit component to show global filter pattern applied to a Chart. */\n@customElement('sample-filter-chart-component')\nexport class SampleFilterChartComponent extends LitElement {\n  static override styles = css`\n    .filter-text {\n      display: none;\n    }\n\n    @media (min-width: 42rem) {\n      .filter-text {\n        display: inline;\n      }\n    }\n  `;\n\n  /** Array of sample checkbox filter options. */\n  @property({ type: Array })\n  checkboxOptions: Array<any> = [\n    {\n      value: 'Red',\n      text: 'Red',\n    },\n    {\n      value: 'Blue',\n      text: 'Blue',\n    },\n    {\n      value: 'Yellow',\n      text: 'Yellow',\n    },\n    {\n      value: 'Green',\n      text: 'Green',\n    },\n    {\n      value: 'Purple',\n      text: 'Purple',\n    },\n    {\n      value: 'Orange',\n      text: 'Orange',\n    },\n  ];\n\n  @property({ type: Array })\n  chartLabels: Array<string> = [\n    'Red',\n    'Blue',\n    'Yellow',\n    'Green',\n    'Purple',\n    'Orange',\n  ];\n\n  @property({ type: Array })\n  filteredChartLabels: Array<string> = [];\n\n  @property({ type: Array })\n  chartDatasets: Array<any> = [\n    {\n      label: 'Dataset 1',\n      data: [12, 19, 3, 5, 2, 3],\n    },\n    {\n      label: 'Dataset 2',\n      data: [8, 15, 7, 9, 6, 13],\n    },\n  ];\n\n  @property({ type: Object })\n  chartOptions = {\n    scales: {\n      x: {\n        title: {\n          text: 'Color',\n        },\n      },\n      y: {\n        title: {\n          text: 'Votes',\n        },\n      },\n    },\n  };\n\n  override render() {\n    const SelectedOptions = this.checkboxOptions.filter(\n      (option) => option.checked\n    );\n\n    return html`\n      <kyn-global-filter>\n        <kyn-text-input\n          type=\"search\"\n          placeholder=\"Search\"\n          size=\"sm\"\n          hideLabel\n          @on-input=${(e: any) => this._handleSearch(e)}\n        >\n          Search\n          <kd-icon slot=\"icon\" .icon=${searchIcon}></kd-icon>\n        </kyn-text-input>\n\n        <kyn-modal\n          size=\"lg\"\n          titleText=\"Filter\"\n          @on-close=${(e: any) => this._handleModalClose(e)}\n        >\n          <kd-button\n            slot=\"anchor\"\n            kind=\"tertiary\"\n            size=\"small\"\n            iconPosition=\"left\"\n          >\n            <kd-icon\n              slot=\"icon\"\n              .icon=${SelectedOptions.length ? filterEditIcon : filterIcon}\n            ></kd-icon>\n            <span class=\"filter-text\">Filter</span>\n          </kd-button>\n\n          <kd-accordion filledHeaders compact>\n            <kd-accordion-item>\n              <span slot=\"title\">\n                Colors:\n                ${SelectedOptions.length\n                  ? SelectedOptions.length + ' items'\n                  : 'Any'}\n              </span>\n              <div slot=\"body\">\n                <kyn-checkbox-group\n                  name=\"colors\"\n                  hideLegend\n                  selectAll\n                  filterable\n                  limitCheckboxes\n                  .value=${SelectedOptions.map((option) => {\n                    return option.value;\n                  })}\n                  @on-checkbox-group-change=${(e: any) =>\n                    this._handleCheckboxes(e)}\n                >\n                  <span slot=\"label\">Filter 1</span>\n\n                  ${this.checkboxOptions.map(\n                    (option: any) => html`\n                      <kyn-checkbox value=${option.value}>\n                        ${option.text}\n                      </kyn-checkbox>\n                    `\n                  )}\n                </kyn-checkbox-group>\n              </div>\n            </kd-accordion-item>\n\n            <kd-accordion-item>\n              <span slot=\"title\">Filter 2: Any</span>\n              <div slot=\"body\">Some other filter control here.</div>\n            </kd-accordion-item>\n          </kd-accordion>\n        </kyn-modal>\n\n        <kyn-tag-group slot=\"tags\" filter limitTags>\n          ${SelectedOptions.map(\n            (filter) =>\n              html`\n                <kyn-tag\n                  label=${filter.text}\n                  tagColor=\"grey\"\n                  @on-close=${(e: any) => this._handleTagClick(e, filter)}\n                ></kyn-tag>\n              `\n          )}\n        </kyn-tag-group>\n\n        ${SelectedOptions.length\n          ? html`\n              <kd-button\n                slot=\"tags\"\n                kind=\"tertiary\"\n                size=\"small\"\n                iconPosition=\"right\"\n                @on-click=${(e: any) => this._handleClearTags(e)}\n              >\n                <kd-icon slot=\"icon\" .icon=${filterRemoveIcon}></kd-icon>\n                Clear All\n              </kd-button>\n            `\n          : null}\n      </kyn-global-filter>\n\n      <br />\n\n      <kd-chart\n        style=\"max-width: 800px;\"\n        height=\"350\"\n        type=\"bar\"\n        chartTitle=\"Bar Chart\"\n        .labels=${this.filteredChartLabels}\n        .datasets=${this.chartDatasets}\n        .options=${this.chartOptions}\n      ></kd-chart>\n    `;\n  }\n\n  private _handleSearch(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // perform filtering here\n    this._filter(e.detail.value);\n  }\n\n  private _handleCheckboxes(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    const Value = e.detail.value;\n\n    // update checked state for each option\n    this.checkboxOptions = this.checkboxOptions.map((option) => {\n      return { ...option, checked: Value.includes(option.value) };\n    });\n\n    // perform filtering here (client-side scenario)\n    this._filter('');\n  }\n\n  private _handleModalClose(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // handle modal close here\n\n    if (e.detail.returnValue === 'ok') {\n      // modal was closed with OK/primary action, logic to perform filtering here (server-side scenario)\n    } else {\n      // modal was closed with cancel/secondary action/x, logic to revert filters here\n    }\n  }\n\n  private _handleTagClick(e: any, option: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // remove tag by setting checkbox option checked value to false\n    option.checked = false;\n\n    // perform filtering here\n    this._filter('');\n\n    // force update/render, since objects are updated by reference\n    this.requestUpdate();\n  }\n\n  private _handleClearTags(e: any) {\n    action(e.type)(e);\n    // console.log(e.detail);\n\n    // update checked state for each option\n    this.checkboxOptions = this.checkboxOptions.map((option) => {\n      return { ...option, checked: false };\n    });\n\n    // perform filtering here\n    this._filter('');\n  }\n\n  private _filter(query: string) {\n    //get selected filters\n    const SelectedOptions = this.checkboxOptions.filter(\n      (option) => option.checked\n    );\n\n    if (SelectedOptions.length) {\n      // filter the labels based on selected checkboxes\n      this.filteredChartLabels = this.chartLabels.filter((label) => {\n        return this.checkboxOptions.some(\n          (option) => option.value === label && option.checked\n        );\n      });\n    } else {\n      // show all labels if no filters applied\n      this.filteredChartLabels = this.chartLabels;\n    }\n\n    // perform search query filtering\n    if (query !== '') {\n      this.filteredChartLabels = this.filteredChartLabels.filter((label) => {\n        return label.toLowerCase().includes(query.toLowerCase());\n      });\n    }\n  }\n\n  override firstUpdated() {\n    // perform initial filtering on first update/render\n    this._filter('');\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sample-filter-chart-component': SampleFilterChartComponent;\n  }\n}\n"],"names":[],"sourceRoot":""}