{"version":3,"file":"1777.53a233cb.iframe.bundle.js","mappings":";AAuEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/checkbox/checkbox.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport CheckboxScss from './checkbox.scss';\n\n/**\n * Checkbox.\n * @fires on-checkbox-change - Captures the change event and emits the selected value and original event details.\n * @slot unnamed - Slot for label text.\n */\n@customElement('kyn-checkbox')\nexport class Checkbox extends LitElement {\n  static override styles = CheckboxScss;\n\n  /** @ignore */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /** Checkbox value. */\n  @property({ type: String })\n  value = '';\n\n  /**\n   * Checkbox name, inherited from the parent group.\n   * @ignore\n   */\n  @property({ type: String })\n  name = '';\n\n  /**\n   * Checkbox checked state, inherited from the parent group if value matches.\n   * @internal\n   */\n  @property({ type: Boolean, reflect: true })\n  checked = false;\n\n  /**\n   * Makes the input required, inherited from the parent group.\n   * @internal\n   */\n  @property({ type: Boolean })\n  required = false;\n\n  /**\n   * Checkbox disabled state, inherited from the parent group.\n   */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /**\n   * Checkbox group invalid state, inherited from the parent group.\n   * @internal\n   */\n  @property({ type: Boolean })\n  invalid = false;\n\n  /**\n   * Determines whether the label should be hidden from visual view but remain accessible\n   * to screen readers for accessibility purposes.\n   */\n  @property({ type: Boolean })\n  visiblyHidden = false;\n\n  /** Determines whether the checkbox is in an indeterminate state. */\n  @property({ type: Boolean })\n  indeterminate = false;\n\n  override render() {\n    return html`\n      <label ?disabled=${this.disabled} ?invalid=${this.invalid}>\n        <span class=${classMap({ 'sr-only': this.visiblyHidden })}>\n          <slot></slot>\n        </span>\n\n        <input\n          type=\"checkbox\"\n          name=${this.name}\n          value=${this.value}\n          .checked=${this.checked}\n          ?checked=${this.checked}\n          ?required=${this.required}\n          ?disabled=${this.disabled}\n          ?invalid=${this.invalid}\n          @change=${(e: any) => this.handleChange(e)}\n          .indeterminate=${this.indeterminate}\n        />\n      </label>\n    `;\n  }\n\n  private handleChange(e: any) {\n    // emit selected value, bubble so it can be captured by the checkbox group\n    const event = new CustomEvent('on-checkbox-change', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        checked: e.target.checked,\n        value: e.target.value,\n        origEvent: e,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-checkbox': Checkbox;\n  }\n}\n"],"names":[],"sourceRoot":""}