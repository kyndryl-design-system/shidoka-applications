{"version":3,"file":"3178.6c44ff21.iframe.bundle.js","mappings":";AA2DA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;ACQA;AACA;;AAEA;;;;;;;AAOA;;AAGA;AACA;;AAEA;;AAIA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/radioButton/radioButton.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/radioButton/radioButtonGroup.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport RadioButtonScss from './radioButton.scss';\n\n/**\n * Radio button.\n * @fires on-radio-change - Captures the change event and emits the selected value and original event details.\n * @slot unnamed - Slot for label text.\n */\n@customElement('kyn-radio-button')\nexport class RadioButton extends LitElement {\n  static override styles = RadioButtonScss;\n\n  /** @ignore */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /** Radio button value. */\n  @property({ type: String })\n  value = '';\n\n  /**\n   * Radio button name, inherited from the parent group.\n   * @ignore\n   */\n  @property({ type: String })\n  name = '';\n\n  /**\n   * Radio button checked state, inherited from the parent group if value matches.\n   * @ignore\n   */\n  @property({ type: Boolean })\n  checked = false;\n\n  /**\n   * Makes the input required, inherited from the parent group.\n   * @ignore\n   */\n  @property({ type: Boolean })\n  required = false;\n\n  /**\n   * Radio button disabled state, inherited from the parent group.\n   */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /**\n   * Radio button group invalid state, inherited from the parent group.\n   * @ignore\n   */\n  @property({ type: Boolean })\n  invalid = false;\n\n  override render() {\n    return html`\n      <label ?disabled=${this.disabled} ?invalid=${this.invalid}>\n        <span><slot></slot></span>\n        <input\n          type=\"radio\"\n          name=${this.name}\n          value=${this.value}\n          .checked=${this.checked}\n          ?checked=${this.checked}\n          ?required=${this.required}\n          ?disabled=${this.disabled}\n          ?invalid=${this.invalid}\n          @change=${(e: any) => this.handleChange(e)}\n        />\n      </label>\n    `;\n  }\n\n  private handleChange(e: any) {\n    // emit selected value, bubble so it can be captured by the radio group\n    const event = new CustomEvent('on-radio-change', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        checked: e.target.checked,\n        value: e.target.value,\n        origEvent: e,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-radio-button': RadioButton;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport RadioButtonGroupScss from './radioButtonGroup.scss';\n\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport errorIcon from '@carbon/icons/es/warning--filled/16';\n\n/**\n * Radio button group container.\n * @fires on-radio-group-change - Captures the change event and emits the selected value.\n * @slot unnamed - Slot for individual radio buttons.\n * @slot label - Slot for label text.\n */\n@customElement('kyn-radio-button-group')\nexport class RadioButtonGroup extends LitElement {\n  static override styles = RadioButtonGroupScss;\n\n  /**\n   * Associate the component with forms.\n   * @ignore\n   */\n  static formAssociated = true;\n\n  /** Radio button input name attribute. */\n  @property({ type: String })\n  name = '';\n\n  /** Radio button group selected value. */\n  @property({ type: String })\n  value = '';\n\n  /** Makes the input required. */\n  @property({ type: Boolean })\n  required = false;\n\n  /** Radio button group disabled state. */\n  @property({ type: Boolean })\n  disabled = false;\n\n  /** Radio button group horizontal layout. */\n  @property({ type: Boolean })\n  horizontal = false;\n\n  /** Radio button group invalid text. */\n  @property({ type: String })\n  invalidText = '';\n\n  /**\n   * Queries for slotted radio buttons.\n   * @ignore\n   */\n  @queryAssignedElements()\n  radioButtons!: Array<any>;\n\n  /**\n   * Attached internals for form association.\n   * @ignore\n   */\n  @state()\n  internals = this.attachInternals();\n\n  /**\n   * Internal validation message.\n   * @ignore\n   */\n  @state()\n  internalValidationMsg = '';\n\n  /**\n   * isInvalid when internalValidationMsg or invalidText is non-empty.\n   * @ignore\n   */\n  @state()\n  isInvalid = false;\n\n  override render() {\n    return html`\n      <fieldset ?disabled=${this.disabled}>\n        <div class=\"${this.horizontal ? 'horizontal' : ''}\">\n          <legend>\n            ${this.required ? html`<span class=\"required\">*</span>` : null}\n            <slot name=\"label\"></slot>\n          </legend>\n\n          <slot></slot>\n        </div>\n\n        ${this.isInvalid\n          ? html`\n              <div class=\"error\">\n                <kd-icon .icon=\"${errorIcon}\"></kd-icon>\n                ${this.invalidText || this.internalValidationMsg}\n              </div>\n            `\n          : null}\n      </fieldset>\n    `;\n  }\n\n  override updated(changedProps: any) {\n    if (changedProps.has('name')) {\n      // set name for each radio button\n      this.radioButtons.forEach((radio: any) => {\n        radio.name = this.name;\n      });\n    }\n\n    if (changedProps.has('value')) {\n      this._validate(false, false);\n\n      // set checked state for each radio button\n      this.radioButtons.forEach((radio: any) => {\n        radio.checked = radio.value === this.value;\n      });\n\n      // set form data value\n      // this.internals.setFormValue(this.value);\n    }\n\n    if (changedProps.has('required')) {\n      // set required for each radio button\n      this.radioButtons.forEach((radio: any) => {\n        radio.required = this.required;\n      });\n    }\n\n    if (\n      changedProps.has('disabled') &&\n      changedProps.get('disabled') !== undefined\n    ) {\n      // set disabled for each radio button\n      this.radioButtons.forEach((radio: any) => {\n        radio.disabled = this.disabled;\n      });\n    }\n\n    if (\n      changedProps.has('invalidText') &&\n      changedProps.get('invalidText') !== undefined\n    ) {\n      this._validate(false, false);\n    }\n\n    if (\n      changedProps.has('invalidText') ||\n      changedProps.has('internalValidationMsg')\n    ) {\n      //check if any (internal / external )error msg. present then isInvalid is true\n      this.isInvalid =\n        this.invalidText !== '' || this.internalValidationMsg !== ''\n          ? true\n          : false;\n\n      // set invalid state for each radio button\n      this.radioButtons.forEach((radio: any) => {\n        radio.invalid = this.isInvalid;\n      });\n    }\n  }\n\n  private _validate(interacted: Boolean, report: Boolean) {\n    // set validity flags\n    const Validity = {\n      customError: this.invalidText !== '',\n      valueMissing: this.required && this.value === '',\n    };\n\n    // set validationMessage\n    const InternalMsg =\n      this.required && this.value === '' ? 'A selection is required.' : '';\n    const ValidationMessage =\n      this.invalidText !== '' ? this.invalidText : InternalMsg;\n\n    // set validity on custom element, anchor to first radio\n    this.internals.setValidity(\n      Validity,\n      ValidationMessage,\n      this.radioButtons[0]\n    );\n\n    // set internal validation message if value was changed by user input\n    if (interacted) {\n      this.internalValidationMsg = InternalMsg;\n    }\n\n    // focus the first checkbox to show validity\n    if (report) {\n      this.internals.reportValidity();\n    }\n  }\n\n  private _handleRadioChange(e: any) {\n    // set selected value\n    this.value = e.detail.value;\n\n    this._validate(false, false);\n\n    // emit selected value\n    const event = new CustomEvent('on-radio-group-change', {\n      detail: { value: e.detail.value },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private _handleFormdata(e: any) {\n    e.formData.append(this.name, this.value);\n  }\n\n  private _handleInvalid() {\n    this._validate(true, false);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    // capture child radio buttons change event\n    this.addEventListener('on-radio-change', (e: any) =>\n      this._handleRadioChange(e)\n    );\n\n    if (this.internals.form) {\n      this.internals.form.addEventListener('formdata', (e) =>\n        this._handleFormdata(e)\n      );\n\n      this.addEventListener('invalid', () => {\n        this._handleInvalid();\n      });\n    }\n  }\n\n  override disconnectedCallback(): void {\n    this.removeEventListener('on-radio-change', (e: any) =>\n      this._handleRadioChange(e)\n    );\n\n    if (this.internals.form) {\n      this.internals.form.removeEventListener('formdata', (e) =>\n        this._handleFormdata(e)\n      );\n\n      this.removeEventListener('invalid', () => {\n        this._handleInvalid();\n      });\n    }\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-radio-button-group': RadioButtonGroup;\n  }\n}\n"],"names":[],"sourceRoot":""}