{"version":3,"file":"8770.dd1bded0.iframe.bundle.js","mappings":";;;;;AA+FA;ACHA;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAIA;;;ACyGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AAEA;AACA;AACA;;AAIA;AC/MA;;;;AAOA;AC8BA;;AAGA;AACA;;AAEA;;;AAGA;;AAIA;;ACvBA;;;AAGA;AACA;;;AAGA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;AAMA","sources":["webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/table/table-cell.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/table/table-row.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/table/table-header.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/table/table-toolbar.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/table/table-header-row.ts","webpack://@kyndryl-design-system/shidoka-applications/./src/components/reusable/table/story-helpers/action-menu.ts"],"sourcesContent":["import { html, LitElement, PropertyValues } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { ContextConsumer } from '@lit/context';\nimport { tableContext, TableContextType } from './table-context';\n\nimport styles from './table-cell.scss';\n\nimport { TABLE_CELL_ALIGN } from './defs';\n\n/**\n * `kyn-td` Web Component.\n *\n * Represents a table cell (data cell) within Shidoka's design system tables.\n * Allows customization of alignment and can reflect the sort direction when\n * used within sortable columns.\n *\n * @slot unnamed - The content slot for adding table data inside the cell.\n */\n@customElement('kyn-td')\nexport class TableCell extends LitElement {\n  static override styles = [styles];\n\n  @property({ type: Boolean, reflect: true })\n  dense = false;\n\n  /** Determines the text alignment of the table cell's content. */\n  @property({ type: String, reflect: true })\n  align: TABLE_CELL_ALIGN = TABLE_CELL_ALIGN.LEFT;\n\n  /**\n   * Sets a fixed width for the cell.\n   * Accepts standard CSS width values (e.g., '150px', '50%').\n   */\n  @property({ type: String, reflect: true })\n  width = '';\n\n  /**\n   * Sets a maximum width for the cell; contents exceeding this limit will be truncated with ellipsis.\n   * Accepts standard CSS width values (e.g., '150px', '50%').\n   */\n  @property({ type: String, reflect: true })\n  maxWidth = '';\n\n  /** Truncates the cell's contents with ellipsis. */\n  @property({ type: Boolean, reflect: true })\n  ellipsis = false;\n\n  /**\n   * Context consumer for the table context.\n   * Updates the cell's dense and ellipsis properties when the context changes.\n   * @private\n   * @ignore\n   * @type {ContextConsumer<TableContextType, TableCell>}\n   */\n  @state()\n  // @ts-expect-error - This is a context consumer\n  private _contextConsumer = new ContextConsumer(\n    this,\n    tableContext,\n    (context) => {\n      if (context) this.handleContextChange(context);\n    },\n    true\n  );\n\n  /**\n   * Updates the cell's dense and ellipsis properties when the context changes.\n   * @param {TableContextType} context - The updated context.\n   */\n  handleContextChange = ({ dense, ellipsis }: TableContextType) => {\n    if (typeof dense == 'boolean') {\n      this.dense = dense;\n    }\n    if (typeof ellipsis == 'boolean') {\n      this.ellipsis = ellipsis;\n    }\n  };\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.maxWidth && changedProperties.has('maxWidth')) {\n      this.style.setProperty('--kyn-td-max-width', this.maxWidth);\n    }\n\n    if (this.width && changedProperties.has('width')) {\n      this.style.setProperty('--kyn-td-width', this.width);\n    }\n  }\n\n  override render() {\n    return html`\n      <div class=\"slot-wrapper\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-td': TableCell;\n  }\n}\n","import { html, LitElement } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { ContextConsumer } from '@lit/context';\nimport { tableContext, TableContextType } from './table-context';\n\nimport styles from './table-row.scss';\nimport '../checkbox/checkbox';\n\n/**\n * `kyn-tr` Web Component.\n *\n * Represents a table row (`<tr>`) equivalent for custom tables created with Shidoka's design system.\n * It primarily acts as a container for individual table cells and behaves similarly to a native `<tr>` element.\n *\n * @slot unnamed - The content slot for adding table cells (`kyn-td` or other relevant cells).\n */\n@customElement('kyn-tr')\nexport class TableRow extends LitElement {\n  static override styles = [styles];\n\n  /**\n   * rowId: String - Unique identifier for the row.\n   */\n  @property({ type: String, reflect: true })\n  rowId = '';\n\n  /**\n   * selected: Boolean indicating whether the row is selected.\n   * Reflects the `selected` attribute.\n   */\n  @property({ type: Boolean, reflect: true })\n  selected = false;\n\n  /**\n   * checkboxSelection: Boolean indicating whether rows should be\n   * selectable using checkboxes.\n   */\n  @property({ type: Boolean, reflect: true })\n  checkboxSelection = false;\n\n  /**\n   * dense: Boolean indicating whether the table should be displayed\n   * in dense mode.\n   */\n  @property({ type: Boolean })\n  dense = false;\n\n  /**\n   * Context consumer for the table context.\n   * Updates the cell's dense and ellipsis properties when the context changes.\n   * @private\n   * @ignore\n   * @type {ContextConsumer<TableContextType, TableHeader>}\n   */\n  @state()\n  // @ts-expect-error - This is a context consumer\n  private _contextConsumer = new ContextConsumer(\n    this,\n    tableContext,\n    (context) => {\n      if (context) this.handleContextChange(context);\n    },\n    true\n  );\n\n  /**\n   * Updates the cell's dense and ellipsis properties when the context changes.\n   * @param {TableContextType} context - The updated context.\n   */\n  handleContextChange = ({ checkboxSelection }: TableContextType) => {\n    if (typeof checkboxSelection == 'boolean') {\n      this.checkboxSelection = checkboxSelection;\n    }\n  };\n\n  /**\n   * Handles the change of selection state for a specific row.\n   */\n  handleRowSelectionChange(event: CustomEvent) {\n    this.selected = event.detail.checked;\n    // Emit the custom event with the selected row and its new state\n    this.dispatchEvent(\n      new CustomEvent('on-row-select', {\n        detail: event.detail,\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  override render() {\n    return html`\n      ${this.checkboxSelection\n        ? html`\n            <kyn-td .align=${'center'} ?dense=${this.dense}>\n              <kyn-checkbox\n                .checked=${this.selected}\n                visiblyHidden\n                @on-checkbox-change=${this.handleRowSelectionChange}\n              >\n                ${this.selected ? 'Deselect' : 'Select'} Row ${this.rowId}\n              </kyn-checkbox>\n            </kyn-td>\n          `\n        : null}\n      <slot></slot>\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-tr': TableRow;\n  }\n}\n","import { html, LitElement } from 'lit';\nimport {\n  customElement,\n  property,\n  queryAssignedNodes,\n  state,\n} from 'lit/decorators.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { ContextConsumer } from '@lit/context';\nimport { tableContext, TableContextType } from './table-context';\n\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport arrowUpIcon from '@carbon/icons/es/arrow--up/16';\nimport styles from './table-header.scss';\n\nimport { SORT_DIRECTION, TABLE_CELL_ALIGN } from './defs';\n\n/**\n * `kyn-th` Web Component.\n *\n * Represents a custom table header cell (`<th>`) for Shidoka's design system tables.\n * Provides sorting functionality when enabled and allows alignment customization.\n *\n * @fires on-sort-changed - Dispatched when the sort direction is changed.\n * @slot unnamed - The content slot for adding header text or content.\n */\n@customElement('kyn-th')\nexport class TableHeader extends LitElement {\n  static override styles = [styles];\n\n  /** Determines if the cell should have a denser layout. */\n  @property({ type: Boolean, reflect: true })\n  dense = false;\n\n  /** Truncates the cell's contents with ellipsis. */\n  @property({ type: Boolean, reflect: true })\n  ellipsis = false;\n\n  /**\n   * Context consumer for the table context.\n   * Updates the cell's dense and ellipsis properties when the context changes.\n   * @private\n   * @ignore\n   * @type {ContextConsumer<TableContextType, TableHeader>}\n   */\n  @state()\n  // @ts-expect-error - This is a context consumer\n  private _contextConsumer = new ContextConsumer(\n    this,\n    tableContext,\n    (context) => {\n      if (context) this.handleContextChange(context);\n    },\n    true\n  );\n\n  /**\n   * Updates the cell's dense and ellipsis properties when the context changes.\n   * @param {TableContextType} context - The updated context.\n   */\n  handleContextChange = ({ dense, ellipsis }: TableContextType) => {\n    if (typeof dense == 'boolean') {\n      this.dense = dense;\n    }\n    if (typeof ellipsis == 'boolean') {\n      this.ellipsis = ellipsis;\n    }\n  };\n\n  /**\n   * Specifies the alignment of the content within the table header.\n   * Options: 'left', 'center', 'right'\n   */\n  @property({ type: String, reflect: true })\n  align: TABLE_CELL_ALIGN = TABLE_CELL_ALIGN.LEFT;\n\n  /**\n   * Specifies if the column is sortable.\n   * If set to true, an arrow icon will be displayed unpon hover,\n   * allowing the user to toggle sort directions.\n   */\n  @property({ type: Boolean, reflect: true })\n  sortable = false;\n\n  /** Specifies the direction of sorting applied to the column. */\n  @property({ type: String, reflect: true })\n  sortDirection: SORT_DIRECTION = SORT_DIRECTION.DEFAULT;\n\n  /**\n   * The textual content associated with this component.\n   * Represents the primary content or label that will be displayed.\n   */\n  @property({ type: String })\n  headerLabel = '';\n\n  /**\n   * The unique identifier representing this column header.\n   * Used to distinguish between different sortable columns and\n   * to ensure that only one column is sorted at a time.\n   */\n  @property({ type: String })\n  sortKey = '';\n\n  /**\n   * Determines whether the content should be hidden from visual view but remain accessible\n   * to screen readers for accessibility purposes. When set to `true`, the content\n   * will not be visibly shown, but its content can still be read by screen readers.\n   * This is especially useful for providing additional context or information to\n   * assistive technologies without cluttering the visual UI.\n   */\n  @property({ type: Boolean })\n  visiblyHidden = false;\n\n  /**\n   * @ignore\n   */\n  @queryAssignedNodes({ flatten: true })\n  listItems!: Array<Node>;\n\n  /**\n   * Resets the sorting direction of the component to its default state.\n   * Useful for initializing or clearing any applied sorting on the element.\n   */\n  resetSort() {\n    this.sortDirection = SORT_DIRECTION.DEFAULT;\n  }\n\n  /**\n   * Toggles the sort direction between ascending, descending, and default states.\n   * It also dispatches an event to notify parent components of the sorting change.\n   */\n  private toggleSortDirection() {\n    if (!this.sortKey) {\n      console.error('sortKey is missing for a sortable column.');\n      return;\n    }\n\n    switch (this.sortDirection) {\n      case SORT_DIRECTION.DEFAULT:\n      case SORT_DIRECTION.DESC:\n        this.sortDirection = SORT_DIRECTION.ASC;\n        break;\n      case SORT_DIRECTION.ASC:\n        this.sortDirection = SORT_DIRECTION.DESC;\n        break;\n    }\n\n    // Dispatch event to notify parent components of the sorting change\n    this.dispatchEvent(\n      new CustomEvent('on-sort-changed', {\n        bubbles: true,\n        composed: true,\n        detail: { sortDirection: this.sortDirection, sortKey: this.sortKey },\n      })\n    );\n  }\n\n  override updated() {\n    this.getTextContent();\n  }\n\n  getTextContent() {\n    const nonWhitespaceNodes = this.listItems.filter((node) => {\n      return (\n        node?.nodeType !== Node.TEXT_NODE || node?.textContent?.trim() !== ''\n      );\n    });\n\n    this.headerLabel = nonWhitespaceNodes[0]?.textContent || '';\n  }\n\n  override render() {\n    const iconClasses = {\n      'sort-icon': true,\n      'sort-icon--sorting': this.sortDirection !== SORT_DIRECTION.DEFAULT,\n      'sort-icon--sorting-asc': this.sortDirection === SORT_DIRECTION.ASC,\n      'sort-icon--sorting-desc': this.sortDirection === SORT_DIRECTION.DESC,\n    };\n\n    const slotClasses = {\n      'slot-wrapper': true,\n      'sr-only': this.visiblyHidden,\n    };\n\n    /**\n     * Accessibility Enhancements:\n     * - role: Sets the appropriate role for interactive headers (e.g., when sortable).\n     * - ariaSort: Indicates the sorting direction to assistive technologies.\n     * - ariaLabel: Provides a descriptive label to assistive technologies for sortable headers.\n     * - tabIndex: Enables keyboard interaction for sortable headers.\n     * - onKeyDown: Handles keyboard events for sortable headers to allow sorting via the keyboard.\n     */\n    const role = this.sortable ? 'button' : undefined;\n    const arialSort = this.sortable ? this.sortDirection : undefined;\n    const ariaLabel =\n      this.sortable && this.headerLabel\n        ? `Sort by ${this.headerLabel}`\n        : undefined;\n    const tabIndex = this.sortable ? 0 : undefined;\n    const onKeyDown = this.sortable\n      ? (e: KeyboardEvent) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            this.toggleSortDirection();\n          }\n        }\n      : undefined;\n\n    return html`\n      <div\n        class=\"container\"\n        @click=${this.sortable ? () => this.toggleSortDirection() : undefined}\n        role=${ifDefined(role)}\n        arial-label=${ifDefined(ariaLabel)}\n        arial-sort=${ifDefined(arialSort)}\n        tabindex=${ifDefined(tabIndex)}\n        @keydown=${onKeyDown}\n      >\n        <div class=${classMap(slotClasses)}>\n          <slot></slot>\n        </div>\n        ${this.sortable\n          ? html`<kd-icon\n              class=${classMap(iconClasses)}\n              .icon=${arrowUpIcon}\n            ></kd-icon>`\n          : null}\n      </div>\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-th': TableHeader;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport styles from './table-toolbar.scss';\n\n/**\n * `kyn-table-toolbar` Web Component.\n *\n * This component provides a toolbar for tables, primarily featuring a title and additional content.\n * The title is rendered prominently, while the slot can be used for controls, buttons, or other interactive elements.\n *\n * @slot unnamed - The primary content slot for controls, buttons, or other toolbar content.\n */\n@customElement('kyn-table-toolbar')\nexport class TableToolbar extends LitElement {\n  static override styles = [styles];\n\n  /**The title for the toolbar */\n  @property({ type: String })\n  tableTitle = '';\n\n  override render() {\n    return html`\n      ${this.tableTitle\n        ? html`<span class=\"title\">${this.tableTitle}</span>`\n        : ''}\n      <div class=\"slot-wrapper\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-table-toolbar': TableToolbar;\n  }\n}\n","import { customElement, state } from 'lit/decorators.js';\nimport { TableRow } from './table-row';\nimport { html } from 'lit';\n\nimport styles from './table-header-row.scss';\n\n/**\n * `kyn-header-tr` Web Component.\n *\n * The `<kyn-header-tr>` component is designed to function as the\n * header row within a table that's part of Shidoka's design system.\n */\n@customElement('kyn-header-tr')\nexport class TableHeaderRow extends TableRow {\n  static override styles = [styles];\n\n  /**\n   * headerCheckboxIndeterminate: Boolean indicating whether the header\n   * checkbox is in an indeterminate state.\n   * @ignore\n   */\n  @state()\n  private headerCheckboxIndeterminate = false;\n\n  /**\n   * headerCheckboxChecked: Boolean indicating whether the header checkbox is\n   * checked.\n   * @ignore\n   */\n  @state()\n  private headerCheckboxChecked = false;\n\n  /**\n   * Toggles the selection state of all rows in the table.\n   */\n  handleToggleSelectionAll(event: CustomEvent) {\n    this.dispatchEvent(\n      new CustomEvent('on-header-checkbox-toggle', {\n        detail: event.detail,\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  /**\n   * Updates the state of the header checkbox based on the number of\n   * selected rows.\n   */\n  updateHeaderCheckboxState(indeterminate: boolean, checked: boolean) {\n    this.headerCheckboxIndeterminate = indeterminate;\n    this.headerCheckboxChecked = checked;\n    this.requestUpdate();\n  }\n\n  override render() {\n    const { headerCheckboxIndeterminate, headerCheckboxChecked } = this;\n\n    super.render();\n    return html`\n      ${this.checkboxSelection\n        ? html` <kyn-th .align=${'center'} ?dense=${this.dense}\n            ><kyn-checkbox\n              .indeterminate=${headerCheckboxIndeterminate}\n              .checked=${headerCheckboxChecked}\n              visiblyHidden\n              @on-checkbox-change=${this.handleToggleSelectionAll}\n              >Select All Items</kyn-checkbox\n            >\n          </kyn-th>`\n        : null}\n      <slot></slot>\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-header-tr': TableHeaderRow;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport '../../overflowMenu';\n\nimport styles from './action-menu.scss';\n\n@customElement('action-menu')\nexport class ActionMenu extends LitElement {\n  static override styles = [styles];\n\n  @property({ type: Boolean })\n  opened = false;\n\n  @property({ type: Function })\n  handleDelete = (id: number) => {\n    console.log('Delete action triggered', id);\n  };\n\n  @property({ type: Number })\n  itemId = 0;\n\n  toggleMenu() {\n    this.opened = !this.opened;\n  }\n\n  deleteHandler = (itemId: number, e: any) => {\n    this.dispatchEvent(\n      new CustomEvent('on-delete', {\n        bubbles: true,\n        composed: true,\n      })\n    );\n    e.detail.origEvent.stopPropagation();\n    this.handleDelete(itemId);\n    this.toggleMenu();\n  };\n\n  actionHandler = (itemId: number, e: any) => {\n    e.detail.origEvent.stopPropagation();\n    console.log('Action triggered', itemId);\n    this.toggleMenu();\n  };\n\n  _handleToggle = (e: any) => {\n    this.opened = e.detail.open;\n  };\n\n  override render() {\n    return html`\n      <kyn-overflow-menu\n        ?open=${this.opened}\n        anchorRight\n        assistiveText=\"Actions\"\n        @on-toggle=${(e: Event) => this._handleToggle(e)}\n        @click=${(e: Event) => e.stopPropagation()}\n      >\n        <kyn-overflow-menu-item\n          @on-click=${(e: Event) => this.actionHandler(this.itemId, e)}\n        >\n          Action 1\n        </kyn-overflow-menu-item>\n        <kyn-overflow-menu-item\n          href=\"javascript:void(0);\"\n          @on-click=${(e: Event) => this.actionHandler(this.itemId, e)}\n        >\n          Action 2\n        </kyn-overflow-menu-item>\n        <kyn-overflow-menu-item\n          disabled\n          @on-click=${(e: Event) => this.actionHandler(this.itemId, e)}\n        >\n          Action 3\n        </kyn-overflow-menu-item>\n        <kyn-overflow-menu-item\n          destructive\n          @on-click=${(e: Event) => this.deleteHandler(this.itemId, e)}\n        >\n          Delete\n        </kyn-overflow-menu-item>\n      </kyn-overflow-menu>\n    `;\n  }\n}\n\n// Define the custom element in the global namespace\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'action-menu': ActionMenu;\n  }\n}\n"],"names":[],"sourceRoot":""}